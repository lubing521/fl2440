


ARM Macro Assembler    Page 1 


    1 00000000         ;=======================================================
                       ==============
    2 00000000         ; File Name : 2440slib.s
    3 00000000         ; Function  : S3C2440  (Assembly)
    4 00000000         ; Date      : March 09, 2002
    5 00000000         ; Revision : Programming start (February 26,2002) -> SOP
                       
    6 00000000         ; Revision : 03.11.2003 ver 0.0 Attatched for 2440
    7 00000000         ;=======================================================
                       ==============
    8 00000000         
    9 00000000         ;Interrupt, FIQ/IRQ disable
   10 00000000 000000C0 
                       NOINT   EQU     0xc0        ; 1100 0000
   11 00000000         
   12 00000000         ;Check if tasm.exe(armasm -16 ...@ADS 1.0) is used.
   13 00000000                 GBLL    THUMBCODE
   14 00000000                 [       {CONFIG} = 16
   18 00000000 FALSE    
                       THUMBCODE
                               SETL    {FALSE}
   19 00000000                 ]
   20 00000000         
   21 00000000                 MACRO
   22 00000000                 MOV_PC_LR
   23 00000000                 [       THUMBCODE
   24 00000000                 bx      lr
   25 00000000                 |
   26 00000000                 mov     pc,lr
   27 00000000                 ]
   28 00000000                 MEND
   29 00000000         
   30 00000000                 AREA    |C$$code|, CODE, READONLY
   31 00000000                 EXPORT  EnterCritical
   32 00000000         EnterCritical
   33 00000000 E10F1000        mrs     r1, cpsr
   34 00000004 E5801000        str     r1, [r0]
   35 00000008 E38110C0        orr     r1, r1, #NOINT
   36 0000000C E12FF001        msr     cpsr_cxsf, r1
   37 00000010                 MOV_PC_LR
   23 00000010                 [       THUMBCODE
   26 00000010 E1A0F00E        mov     pc,lr
   27 00000014                 ]
   38 00000014         ;restore cpsr, r0 = address to restore cpsr 
   39 00000014                 EXPORT  ExitCritical
   40 00000014         ExitCritical
   41 00000014 E5901000        ldr     r1, [r0]
   42 00000018 E12FF001        msr     cpsr_cxsf, r1
   43 0000001C                 MOV_PC_LR
   23 0000001C                 [       THUMBCODE
   26 0000001C E1A0F00E        mov     pc,lr
   27 00000020                 ]
   44 00000020         ;==============
   45 00000020         ; CPSR I,F bit
   46 00000020         ;==============
   47 00000020         ;int SET_IF(void);
   48 00000020         ;The return value is current CPSR.
   49 00000020                 EXPORT  SET_IF
   50 00000020         SET_IF



ARM Macro Assembler    Page 2 


   51 00000020         ;This function works only if the processor is in previli
                       ged mode.
   52 00000020 E10F0000        mrs     r0,cpsr
   53 00000024 E1A01000        mov     r1,r0
   54 00000028 E38110C0        orr     r1,r1,#NOINT
   55 0000002C E12FF001        msr     cpsr_cxsf,r1
   56 00000030                 MOV_PC_LR
   23 00000030                 [       THUMBCODE
   26 00000030 E1A0F00E        mov     pc,lr
   27 00000034                 ]
   57 00000034         
   58 00000034         ;void WR_IF(int cpsrValue);
   59 00000034                 EXPORT  WR_IF
   60 00000034         WR_IF
   61 00000034         ;This function works only if the processor is in previli
                       ged mode.
   62 00000034 E12FF000        msr     cpsr_cxsf,r0
   63 00000038                 MOV_PC_LR
   23 00000038                 [       THUMBCODE
   26 00000038 E1A0F00E        mov     pc,lr
   27 0000003C                 ]
   64 0000003C         
   65 0000003C         
   66 0000003C         ;void CLR_IF(void);
   67 0000003C                 EXPORT  CLR_IF
   68 0000003C         CLR_IF
   69 0000003C         ;This function works only if the processor is in previli
                       ged mode.
   70 0000003C E10F0000        mrs     r0,cpsr
   71 00000040 E3C000C0        bic     r0,r0,#NOINT
   72 00000044 E12FF000        msr     cpsr_cxsf,r0
   73 00000048                 MOV_PC_LR
   23 00000048                 [       THUMBCODE
   26 00000048 E1A0F00E        mov     pc,lr
   27 0000004C                 ]
   74 0000004C         
   75 0000004C                 EXPORT  outportw
   76 0000004C E1C100B0 
                       outportw
                               strh    r0, [r1]
   77 00000050                 MOV_PC_LR
   23 00000050                 [       THUMBCODE
   26 00000050 E1A0F00E        mov     pc,lr
   27 00000054                 ]
   78 00000054         
   79 00000054                 EXPORT  inportw
   80 00000054 E1D000B0 
                       inportw ldrh    r0, [r0]
   81 00000058                 MOV_PC_LR
   23 00000058                 [       THUMBCODE
   26 00000058 E1A0F00E        mov     pc,lr
   27 0000005C                 ]
   82 0000005C         
   83 0000005C         
   84 0000005C         ;====================================
   85 0000005C         ; MMU Cache/TLB/etc on/off functions
   86 0000005C         ;====================================
   87 0000005C 00001000 
                       R1_I    EQU     (1<<12)



ARM Macro Assembler    Page 3 


   88 0000005C 00000004 
                       R1_C    EQU     (1<<2)
   89 0000005C 00000002 
                       R1_A    EQU     (1<<1)
   90 0000005C 00000001 
                       R1_M    EQU     (1)
   91 0000005C 80000000 
                       R1_iA   EQU     (1<<31)
   92 0000005C 40000000 
                       R1_nF   EQU     (1<<30)
   93 0000005C         
   94 0000005C         ;void MMU_EnableICache(void)
   95 0000005C                 EXPORT  MMU_EnableICache
   96 0000005C         MMU_EnableICache
   97 0000005C EE110F10        mrc     p15,0,r0,c1,c0,0
   98 00000060 E3800D40        orr     r0,r0,#R1_I
   99 00000064 EE010F10        mcr     p15,0,r0,c1,c0,0
  100 00000068                 MOV_PC_LR
   23 00000068                 [       THUMBCODE
   26 00000068 E1A0F00E        mov     pc,lr
   27 0000006C                 ]
  101 0000006C         
  102 0000006C         ;void MMU_DisableICache(void)
  103 0000006C                 EXPORT  MMU_DisableICache
  104 0000006C         MMU_DisableICache
  105 0000006C EE110F10        mrc     p15,0,r0,c1,c0,0
  106 00000070 E3C00D40        bic     r0,r0,#R1_I
  107 00000074 EE010F10        mcr     p15,0,r0,c1,c0,0
  108 00000078                 MOV_PC_LR
   23 00000078                 [       THUMBCODE
   26 00000078 E1A0F00E        mov     pc,lr
   27 0000007C                 ]
  109 0000007C         
  110 0000007C         ;void MMU_EnableDCache(void)
  111 0000007C                 EXPORT  MMU_EnableDCache
  112 0000007C         MMU_EnableDCache
  113 0000007C EE110F10        mrc     p15,0,r0,c1,c0,0
  114 00000080 E3800004        orr     r0,r0,#R1_C
  115 00000084 EE010F10        mcr     p15,0,r0,c1,c0,0
  116 00000088                 MOV_PC_LR
   23 00000088                 [       THUMBCODE
   26 00000088 E1A0F00E        mov     pc,lr
   27 0000008C                 ]
  117 0000008C         
  118 0000008C         ;void MMU_DisableDCache(void)
  119 0000008C                 EXPORT  MMU_DisableDCache
  120 0000008C         MMU_DisableDCache
  121 0000008C EE110F10        mrc     p15,0,r0,c1,c0,0
  122 00000090 E3C00004        bic     r0,r0,#R1_C
  123 00000094 EE010F10        mcr     p15,0,r0,c1,c0,0
  124 00000098                 MOV_PC_LR
   23 00000098                 [       THUMBCODE
   26 00000098 E1A0F00E        mov     pc,lr
   27 0000009C                 ]
  125 0000009C         
  126 0000009C         ;void MMU_EnableAlignFault(void)
  127 0000009C                 EXPORT  MMU_EnableAlignFault
  128 0000009C         MMU_EnableAlignFault
  129 0000009C EE110F10        mrc     p15,0,r0,c1,c0,0



ARM Macro Assembler    Page 4 


  130 000000A0 E3800002        orr     r0,r0,#R1_A
  131 000000A4 EE010F10        mcr     p15,0,r0,c1,c0,0
  132 000000A8                 MOV_PC_LR
   23 000000A8                 [       THUMBCODE
   26 000000A8 E1A0F00E        mov     pc,lr
   27 000000AC                 ]
  133 000000AC         
  134 000000AC         ;void MMU_DisableAlignFault(void)
  135 000000AC                 EXPORT  MMU_DisableAlignFault
  136 000000AC         MMU_DisableAlignFault
  137 000000AC EE110F10        mrc     p15,0,r0,c1,c0,0
  138 000000B0 E3C00002        bic     r0,r0,#R1_A
  139 000000B4 EE010F10        mcr     p15,0,r0,c1,c0,0
  140 000000B8                 MOV_PC_LR
   23 000000B8                 [       THUMBCODE
   26 000000B8 E1A0F00E        mov     pc,lr
   27 000000BC                 ]
  141 000000BC         
  142 000000BC         ;void MMU_EnableMMU(void)
  143 000000BC                 EXPORT  MMU_EnableMMU
  144 000000BC         MMU_EnableMMU
  145 000000BC EE110F10        mrc     p15,0,r0,c1,c0,0
  146 000000C0 E3800001        orr     r0,r0,#R1_M
  147 000000C4 EE010F10        mcr     p15,0,r0,c1,c0,0
  148 000000C8                 MOV_PC_LR
   23 000000C8                 [       THUMBCODE
   26 000000C8 E1A0F00E        mov     pc,lr
   27 000000CC                 ]
  149 000000CC         
  150 000000CC         ;void MMU_DisableMMU(void)
  151 000000CC                 EXPORT  MMU_DisableMMU
  152 000000CC         MMU_DisableMMU
  153 000000CC EE110F10        mrc     p15,0,r0,c1,c0,0
  154 000000D0 E3C00001        bic     r0,r0,#R1_M
  155 000000D4 EE010F10        mcr     p15,0,r0,c1,c0,0
  156 000000D8                 MOV_PC_LR
   23 000000D8                 [       THUMBCODE
   26 000000D8 E1A0F00E        mov     pc,lr
   27 000000DC                 ]
  157 000000DC         
  158 000000DC         ;void MMU_SetFastBusMode(void)
  159 000000DC         ; FCLK:HCLK= 1:1
  160 000000DC                 EXPORT  MMU_SetFastBusMode
  161 000000DC         MMU_SetFastBusMode
  162 000000DC EE110F10        mrc     p15,0,r0,c1,c0,0
  163 000000E0 E3C004C0        bic     r0,r0,#R1_iA:OR:R1_nF
  164 000000E4 EE010F10        mcr     p15,0,r0,c1,c0,0
  165 000000E8                 MOV_PC_LR
   23 000000E8                 [       THUMBCODE
   26 000000E8 E1A0F00E        mov     pc,lr
   27 000000EC                 ]
  166 000000EC         
  167 000000EC         ;void MMU_SetAsyncBusMode(void)
  168 000000EC         ; FCLK:HCLK= 1:2
  169 000000EC                 EXPORT  MMU_SetAsyncBusMode
  170 000000EC         MMU_SetAsyncBusMode
  171 000000EC EE110F10        mrc     p15,0,r0,c1,c0,0
  172 000000F0 E38004C0        orr     r0,r0,#R1_nF:OR:R1_iA
  173 000000F4 EE010F10        mcr     p15,0,r0,c1,c0,0



ARM Macro Assembler    Page 5 


  174 000000F8                 MOV_PC_LR
   23 000000F8                 [       THUMBCODE
   26 000000F8 E1A0F00E        mov     pc,lr
   27 000000FC                 ]
  175 000000FC         
  176 000000FC         ;=========================
  177 000000FC         ; Set TTBase
  178 000000FC         ;=========================
  179 000000FC         ;void MMU_SetTTBase(int base)
  180 000000FC                 EXPORT  MMU_SetTTBase
  181 000000FC         MMU_SetTTBase
  182 000000FC         ;ro=TTBase
  183 000000FC EE020F10        mcr     p15,0,r0,c2,c0,0
  184 00000100                 MOV_PC_LR
   23 00000100                 [       THUMBCODE
   26 00000100 E1A0F00E        mov     pc,lr
   27 00000104                 ]
  185 00000104         
  186 00000104         ;=========================
  187 00000104         ; Set Domain
  188 00000104         ;=========================
  189 00000104         ;void MMU_SetDomain(int domain)
  190 00000104                 EXPORT  MMU_SetDomain
  191 00000104         MMU_SetDomain
  192 00000104         ;ro=domain
  193 00000104 EE030F10        mcr     p15,0,r0,c3,c0,0
  194 00000108                 MOV_PC_LR
   23 00000108                 [       THUMBCODE
   26 00000108 E1A0F00E        mov     pc,lr
   27 0000010C                 ]
  195 0000010C         
  196 0000010C         ;=========================
  197 0000010C         ; ICache/DCache functions
  198 0000010C         ;=========================
  199 0000010C         ;void MMU_InvalidateIDCache(void)
  200 0000010C                 EXPORT  MMU_InvalidateIDCache
  201 0000010C         MMU_InvalidateIDCache
  202 0000010C EE070F17        mcr     p15,0,r0,c7,c7,0
  203 00000110                 MOV_PC_LR
   23 00000110                 [       THUMBCODE
   26 00000110 E1A0F00E        mov     pc,lr
   27 00000114                 ]
  204 00000114         
  205 00000114         ;void MMU_InvalidateICache(void)
  206 00000114                 EXPORT  MMU_InvalidateICache
  207 00000114         MMU_InvalidateICache
  208 00000114 EE070F15        mcr     p15,0,r0,c7,c5,0
  209 00000118                 MOV_PC_LR
   23 00000118                 [       THUMBCODE
   26 00000118 E1A0F00E        mov     pc,lr
   27 0000011C                 ]
  210 0000011C         
  211 0000011C         ;void MMU_InvalidateICacheMVA(U32 mva)
  212 0000011C                 EXPORT  MMU_InvalidateICacheMVA
  213 0000011C         MMU_InvalidateICacheMVA
  214 0000011C         ;r0=mva
  215 0000011C EE070F35        mcr     p15,0,r0,c7,c5,1
  216 00000120                 MOV_PC_LR
   23 00000120                 [       THUMBCODE



ARM Macro Assembler    Page 6 


   26 00000120 E1A0F00E        mov     pc,lr
   27 00000124                 ]
  217 00000124         
  218 00000124         ;void MMU_PrefetchICacheMVA(U32 mva)
  219 00000124                 EXPORT  MMU_PrefetchICacheMVA
  220 00000124         MMU_PrefetchICacheMVA
  221 00000124         ;r0=mva
  222 00000124 EE070F3D        mcr     p15,0,r0,c7,c13,1
  223 00000128                 MOV_PC_LR
   23 00000128                 [       THUMBCODE
   26 00000128 E1A0F00E        mov     pc,lr
   27 0000012C                 ]
  224 0000012C         
  225 0000012C         ;void MMU_InvalidateDCache(void)
  226 0000012C                 EXPORT  MMU_InvalidateDCache
  227 0000012C         MMU_InvalidateDCache
  228 0000012C EE070F16        mcr     p15,0,r0,c7,c6,0
  229 00000130                 MOV_PC_LR
   23 00000130                 [       THUMBCODE
   26 00000130 E1A0F00E        mov     pc,lr
   27 00000134                 ]
  230 00000134         
  231 00000134         ;void MMU_InvalidateDCacheMVA(U32 mva)
  232 00000134                 EXPORT  MMU_InvalidateDCacheMVA
  233 00000134         MMU_InvalidateDCacheMVA
  234 00000134         ;r0=mva
  235 00000134 EE070F36        mcr     p15,0,r0,c7,c6,1
  236 00000138                 MOV_PC_LR
   23 00000138                 [       THUMBCODE
   26 00000138 E1A0F00E        mov     pc,lr
   27 0000013C                 ]
  237 0000013C         
  238 0000013C         ;void MMU_CleanDCacheMVA(U32 mva)
  239 0000013C                 EXPORT  MMU_CleanDCacheMVA
  240 0000013C         MMU_CleanDCacheMVA
  241 0000013C         ;r0=mva
  242 0000013C EE070F3A        mcr     p15,0,r0,c7,c10,1
  243 00000140                 MOV_PC_LR
   23 00000140                 [       THUMBCODE
   26 00000140 E1A0F00E        mov     pc,lr
   27 00000144                 ]
  244 00000144         
  245 00000144         ;void MMU_CleanInvalidateDCacheMVA(U32 mva)
  246 00000144                 EXPORT  MMU_CleanInvalidateDCacheMVA
  247 00000144         MMU_CleanInvalidateDCacheMVA
  248 00000144         ;r0=mva
  249 00000144 EE070F3E        mcr     p15,0,r0,c7,c14,1
  250 00000148                 MOV_PC_LR
   23 00000148                 [       THUMBCODE
   26 00000148 E1A0F00E        mov     pc,lr
   27 0000014C                 ]
  251 0000014C         
  252 0000014C         ;void MMU_CleanDCacheIndex(U32 index)
  253 0000014C                 EXPORT  MMU_CleanDCacheIndex
  254 0000014C         MMU_CleanDCacheIndex
  255 0000014C         ;r0=index
  256 0000014C EE070F5A        mcr     p15,0,r0,c7,c10,2
  257 00000150                 MOV_PC_LR
   23 00000150                 [       THUMBCODE



ARM Macro Assembler    Page 7 


   26 00000150 E1A0F00E        mov     pc,lr
   27 00000154                 ]
  258 00000154         
  259 00000154         ;void MMU_CleanInvalidateDCacheIndex(U32 index)
  260 00000154                 EXPORT  MMU_CleanInvalidateDCacheIndex
  261 00000154         MMU_CleanInvalidateDCacheIndex
  262 00000154         ;r0=index
  263 00000154 EE070F5E        mcr     p15,0,r0,c7,c14,2
  264 00000158                 MOV_PC_LR
   23 00000158                 [       THUMBCODE
   26 00000158 E1A0F00E        mov     pc,lr
   27 0000015C                 ]
  265 0000015C         
  266 0000015C         ;void MMU_WaitForInterrupt(void)
  267 0000015C                 EXPORT  MMU_WaitForInterrupt
  268 0000015C         MMU_WaitForInterrupt
  269 0000015C EE070F90        mcr     p15,0,r0,c7,c0,4
  270 00000160                 MOV_PC_LR
   23 00000160                 [       THUMBCODE
   26 00000160 E1A0F00E        mov     pc,lr
   27 00000164                 ]
  271 00000164         
  272 00000164         ;===============
  273 00000164         ; TLB functions
  274 00000164         ;===============
  275 00000164         ;voic MMU_InvalidateTLB(void)
  276 00000164                 EXPORT  MMU_InvalidateTLB
  277 00000164         MMU_InvalidateTLB
  278 00000164 EE080F17        mcr     p15,0,r0,c8,c7,0
  279 00000168                 MOV_PC_LR
   23 00000168                 [       THUMBCODE
   26 00000168 E1A0F00E        mov     pc,lr
   27 0000016C                 ]
  280 0000016C         
  281 0000016C         ;void MMU_InvalidateITLB(void)
  282 0000016C                 EXPORT  MMU_InvalidateITLB
  283 0000016C         MMU_InvalidateITLB
  284 0000016C EE080F15        mcr     p15,0,r0,c8,c5,0
  285 00000170                 MOV_PC_LR
   23 00000170                 [       THUMBCODE
   26 00000170 E1A0F00E        mov     pc,lr
   27 00000174                 ]
  286 00000174         
  287 00000174         ;void MMU_InvalidateITLBMVA(U32 mva)
  288 00000174                 EXPORT  MMU_InvalidateITLBMVA
  289 00000174         MMU_InvalidateITLBMVA
  290 00000174         ;ro=mva
  291 00000174 EE080F35        mcr     p15,0,r0,c8,c5,1
  292 00000178                 MOV_PC_LR
   23 00000178                 [       THUMBCODE
   26 00000178 E1A0F00E        mov     pc,lr
   27 0000017C                 ]
  293 0000017C         
  294 0000017C         ;void MMU_InvalidateDTLB(void)
  295 0000017C                 EXPORT  MMU_InvalidateDTLB
  296 0000017C         MMU_InvalidateDTLB
  297 0000017C EE080F16        mcr     p15,0,r0,c8,c6,0
  298 00000180                 MOV_PC_LR
   23 00000180                 [       THUMBCODE



ARM Macro Assembler    Page 8 


   26 00000180 E1A0F00E        mov     pc,lr
   27 00000184                 ]
  299 00000184         
  300 00000184         ;void MMU_InvalidateDTLBMVA(U32 mva)
  301 00000184                 EXPORT  MMU_InvalidateDTLBMVA
  302 00000184         MMU_InvalidateDTLBMVA
  303 00000184         ;r0=mva
  304 00000184 EE080F36        mcr     p15,0,r0,c8,c6,1
  305 00000188                 MOV_PC_LR
   23 00000188                 [       THUMBCODE
   26 00000188 E1A0F00E        mov     pc,lr
   27 0000018C                 ]
  306 0000018C         
  307 0000018C         ;=================
  308 0000018C         ; Cache lock down
  309 0000018C         ;=================
  310 0000018C         ;void MMU_SetDCacheLockdownBase(U32 base)
  311 0000018C                 EXPORT  MMU_SetDCacheLockdownBase
  312 0000018C         MMU_SetDCacheLockdownBase
  313 0000018C         ;r0= victim & lockdown base
  314 0000018C EE090F10        mcr     p15,0,r0,c9,c0,0
  315 00000190                 MOV_PC_LR
   23 00000190                 [       THUMBCODE
   26 00000190 E1A0F00E        mov     pc,lr
   27 00000194                 ]
  316 00000194         
  317 00000194         ;void MMU_SetICacheLockdownBase(U32 base)
  318 00000194                 EXPORT  MMU_SetICacheLockdownBase
  319 00000194         MMU_SetICacheLockdownBase
  320 00000194         ;r0= victim & lockdown base
  321 00000194 EE090F30        mcr     p15,0,r0,c9,c0,1
  322 00000198                 MOV_PC_LR
   23 00000198                 [       THUMBCODE
   26 00000198 E1A0F00E        mov     pc,lr
   27 0000019C                 ]
  323 0000019C         
  324 0000019C         ;=================
  325 0000019C         ; TLB lock down
  326 0000019C         ;=================
  327 0000019C         ;void MMU_SetDTLBLockdown(U32 baseVictim)
  328 0000019C                 EXPORT  MMU_SetDTLBLockdown
  329 0000019C         MMU_SetDTLBLockdown
  330 0000019C         ;r0= baseVictim
  331 0000019C EE0A0F10        mcr     p15,0,r0,c10,c0,0
  332 000001A0                 MOV_PC_LR
   23 000001A0                 [       THUMBCODE
   26 000001A0 E1A0F00E        mov     pc,lr
   27 000001A4                 ]
  333 000001A4         
  334 000001A4         ;void MMU_SetITLBLockdown(U32 baseVictim)
  335 000001A4                 EXPORT  MMU_SetITLBLockdown
  336 000001A4         MMU_SetITLBLockdown
  337 000001A4         ;r0= baseVictim
  338 000001A4 EE0A0F30        mcr     p15,0,r0,c10,c0,1
  339 000001A8                 MOV_PC_LR
   23 000001A8                 [       THUMBCODE
   26 000001A8 E1A0F00E        mov     pc,lr
   27 000001AC                 ]
  340 000001AC         



ARM Macro Assembler    Page 9 


  341 000001AC         ;============
  342 000001AC         ; Process ID
  343 000001AC         ;============
  344 000001AC         ;void MMU_SetProcessId(U32 pid)
  345 000001AC                 EXPORT  MMU_SetProcessId
  346 000001AC         MMU_SetProcessId
  347 000001AC         ;r0= pid
  348 000001AC EE0D0F10        mcr     p15,0,r0,c13,c0,0
  349 000001B0                 MOV_PC_LR
   23 000001B0                 [       THUMBCODE
   26 000001B0 E1A0F00E        mov     pc,lr
   27 000001B4                 ]
  350 000001B4         
  351 000001B4                 END
Command Line: [armasm.dll -keep -list D:\Study\project\FL2440\ucosii\ucosii_Dat
a\DebugRel\ObjectCode\2440slib.s.lst -g -browseinfo "0xff
"   -cpu ARM920T -fpu None]
