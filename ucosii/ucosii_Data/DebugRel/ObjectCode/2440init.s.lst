


ARM Macro Assembler    Page 1 


    1 00000000         ;=========================================
    2 00000000         ; NAME: 2440INIT.S
    3 00000000         ; DESC: C start up codes
    4 00000000         ;       Configure memory, ISR ,stacks
    5 00000000         ; Initialize C-variables
    6 00000000         ; HISTORY:
    7 00000000         ; 2002.02.25:kwtark: ver 0.0
    8 00000000         ; 2002.03.20:purnnamu: Add some functions for testing ST
                       OP,Sleep mode
    9 00000000         ; 2003.03.14:DonGo: Modified for 2440.
   10 00000000         ;=========================================
   11 00000000         
   12 00000000                 GET     option.inc
    1 00000000         ;===========================================
    2 00000000         ; NAME: OPTION.A
    3 00000000         ; DESC: Configuration options for .S files
    4 00000000         ; HISTORY:
    5 00000000         ; 02.28.2002: ver 0.0
    6 00000000         ; 03.11.2003: ver 0.0 attached for 2440.
    7 00000000         ; jan E, 2004: ver0.03  modified for 2440A01.
    8 00000000         ;===========================================
    9 00000000         
   10 00000000         ;Start address of each stacks,
   11 00000000 33FF8000 
                       _STACK_BASEADDRESS
                               EQU     0x33ff8000
   12 00000000 33FF8000 
                       _MMUTT_STARTADDRESS
                               EQU     0x33ff8000
   13 00000000 33FFFF00 
                       _ISR_STARTADDRESS
                               EQU     0x33ffff00
   14 00000000         
   15 00000000                 GBLL    PLL_ON_START
   16 00000000 TRUE     
                       PLL_ON_START
                               SETL    {TRUE}
   17 00000000         
   18 00000000         
   19 00000000                 GBLL    ENDIAN_CHANGE
   20 00000000 FALSE    
                       ENDIAN_CHANGE
                               SETL    {FALSE}
   21 00000000         
   22 00000000                 GBLA    ENTRY_BUS_WIDTH
   23 00000000 00000010 
                       ENTRY_BUS_WIDTH
                               SETA    16
   24 00000000         
   25 00000000         
   26 00000000         ;BUSWIDTH = 16,32
   27 00000000                 GBLA    BUSWIDTH    ;max. bus width for the GPIO
                                                    configuration
   28 00000000 00000020 
                       BUSWIDTH
                               SETA    32
   29 00000000         
   30 00000000                 GBLA    UCLK
   31 00000000 02DC6C00 



ARM Macro Assembler    Page 2 


                       UCLK    SETA    48000000
   32 00000000         
   33 00000000                 GBLA    XTAL_SEL
   34 00000000                 GBLA    FCLK
   35 00000000                 GBLA    CPU_SEL
   36 00000000         
   37 00000000         ;(1) Select CPU  
   38 00000000         ;CPU_SEL SETA 32440000 ; 32440000:2440X.
   39 00000000 01EEFEC1 
                       CPU_SEL SETA    32440001    ; 32440001:2440A
   40 00000000         
   41 00000000         ;(2) Select XTaL
   42 00000000 00B71B00 
                       XTAL_SEL
                               SETA    12000000    ;hzh
   43 00000000         ;XTAL_SEL SETA 16934400
   44 00000000         
   45 00000000         ;(3) Select FCLK
   46 00000000 121EAC00 
                       FCLK    SETA    304000000
   47 00000000         ;FCLK  SETA 296352000
   48 00000000         ;FCLK  SETA 271500000
   49 00000000         ;FCLK  SETA 100000000 ;hzh
   50 00000000         ;FCLK  SETA 200000000 ;hzh
   51 00000000 17D78400 
                       FCLK    SETA    400000000   ;hzh
   52 00000000         
   53 00000000         
   54 00000000         ;(4) Select Clock Division (Fclk:Hclk:Pclk)
   55 00000000         ;FCLK = 100000000
   56 00000000         ;CLKDIV_VAL EQU 1 ; 0=1:1:1, 1=1:1:2, 2=1:2:2, 3=1:2:4, 
                       4=1:4:4, 5=1:4:8, 6=1:3:3, 7=1:3:6.
   57 00000000         ;FCLK = 200000000
   58 00000000         ;CLKDIV_VAL EQU 3 ; 0=1:1:1, 1=1:1:2, 2=1:2:2, 3=1:2:4, 
                       4=1:4:4, 5=1:4:8, 6=1:3:3, 7=1:3:6.
   59 00000000         ;FCLK = 400000000
   60 00000000 00000005 
                       CLKDIV_VAL
                               EQU     5           ; 0=1:1:1, 1=1:1:2, 2=1:2:2,
                                                    3=1:2:4, 4=1:4:4, 5=1:4:8, 
                                                   6=1:3:3, 7=1:3:6.
   61 00000000         ;FCLK = 304000000 or 271500000
   62 00000000         ;CLKDIV_VAL EQU 7 ; 0=1:1:1, 1=1:1:2, 2=1:2:2, 3=1:2:4, 
                       4=1:4:4, 5=1:4:8, 6=1:3:3, 7=1:3:6.
   63 00000000         
   64 00000000                 [       XTAL_SEL = 12000000
   65 00000000         
   66 00000000                 [       FCLK = 271500000
   74                          ]
   75 00000000         
   76 00000000                 [       FCLK = 304000000
   84                          ]
   85 00000000         
   86 00000000                 [       FCLK = 100000000
   94                          ]
   95 00000000         
   96 00000000                 [       FCLK = 200000000
  104                          ]
  105 00000000         



ARM Macro Assembler    Page 3 


  106 00000000                 [       FCLK = 400000000
  107 00000000 0000005C 
                       M_MDIV  EQU     92          ;Fin=12.0MHz Fout=400MHz
  108 00000000 00000001 
                       M_PDIV  EQU     1
  109 00000000                 [       CPU_SEL = 32440001
  110 00000000 00000001 
                       M_SDIV  EQU     1           ; 2440A
  111 00000000                 |
  113                          ]
  114 00000000                 ]
  115 00000000         
  116 00000000                 [       UCLK = 48000000
  117 00000000 00000038 
                       U_MDIV  EQU     56          ;Fin=12.0MHz Fout=48MHz
  118 00000000 00000002 
                       U_PDIV  EQU     2
  119 00000000                 [       CPU_SEL = 32440001
  120 00000000 00000002 
                       U_SDIV  EQU     2           ; 2440A
  121 00000000                 |
  123                          ]
  124 00000000                 ]
  125 00000000                 [       UCLK = 96000000
  134                          ]
  135 00000000         
  136 00000000                 |                   ; else if XTAL_SEL = 16.9344
                                                   Mhz
  186                          ]                   ; end of if XTAL_SEL = 12000
                                                   000.
  187 00000000         
  188 00000000         
  189 00000000         
  190 00000000         
  191 00000000                 END
   13 00000000                 GET     memcfg.inc
    1 00000000         ;************************************************
    2 00000000         ; NAME    : MEMCFG.A
    3 00000000         ; DESC   : Memory bank configuration file
    4 00000000         ; Revision: 02.28.2002 ver 0.0
    5 00000000         ; Revision: 03.11.2003 ver 0.0 Attatched for 2440
    6 00000000         ;************************************************
    7 00000000         
    8 00000000         ;Memory Area
    9 00000000         ;GCS6 32bit(64MB) SDRAM(0x3000_0000-0x33ff_ffff)
   10 00000000         
   11 00000000         
   12 00000000         ;BWSCON
   13 00000000 00000000 
                       DW8     EQU     (0x0)
   14 00000000 00000001 
                       DW16    EQU     (0x1)
   15 00000000 00000002 
                       DW32    EQU     (0x2)
   16 00000000 00000004 
                       WAIT    EQU     (0x1<<2)
   17 00000000 00000008 
                       UBLB    EQU     (0x1<<3)
   18 00000000         



ARM Macro Assembler    Page 4 


   19 00000000                 ASSERT  :DEF:BUSWIDTH
   20 00000000                 [       BUSWIDTH=16
   30 00000000 00000001 
                       B1_BWSCON
                               EQU     (DW16)      ; AMD flash(AM29LV800B), 16-
                                                   bit,  for nCS1
   31 00000000 0000000D 
                       B2_BWSCON
                               EQU     (DW16+UBLB+WAIT) 
                                                   ; PCMCIA(PD6710), 16-bit
   32 00000000         ;B2_BWSCON EQU (DW16)
   33 00000000 0000000D 
                       B3_BWSCON
                               EQU     (DW16+UBLB+WAIT) 
                                                   ; Ethernet(CS8900), 16-bit
   34 00000000 00000002 
                       B4_BWSCON
                               EQU     (DW32)      ; Intel Strata(28F128), 32-b
                                                   it, for nCS4
   35 00000000 00000001 
                       B5_BWSCON
                               EQU     (DW16)      ; A400/A410 Ext, 16-bit
   36 00000000 00000002 
                       B6_BWSCON
                               EQU     (DW32)      ; SDRAM(K4S561632C) 32MBx2, 
                                                   32-bit
   37 00000000 00000002 
                       B7_BWSCON
                               EQU     (DW32)      ; N.C.
   38 00000000                 ]
   39 00000000         
   40 00000000         ;BANK0CON
   41 00000000         
   42 00000000 00000003 
                       B0_Tacs EQU     0x3         ;0clk
   43 00000000 00000003 
                       B0_Tcos EQU     0x3         ;0clk
   44 00000000 00000007 
                       B0_Tacc EQU     0x7         ;14clk
   45 00000000 00000003 
                       B0_Tcoh EQU     0x3         ;0clk
   46 00000000 00000003 
                       B0_Tah  EQU     0x3         ;0clk
   47 00000000 00000001 
                       B0_Tacp EQU     0x1
   48 00000000 00000000 
                       B0_PMC  EQU     0x0         ;normal
   49 00000000         
   50 00000000         ;BANK1CON
   51 00000000 00000001 
                       B1_Tacs EQU     1           ;0x0 ;0clk
   52 00000000 00000001 
                       B1_Tcos EQU     1           ;0x0 ;0clk
   53 00000000 00000006 
                       B1_Tacc EQU     6           ;0x7 ;14clk
   54 00000000 00000001 
                       B1_Tcoh EQU     1           ;0x0 ;0clk
   55 00000000 00000001 
                       B1_Tah  EQU     1           ;0x0 ;0clk



ARM Macro Assembler    Page 5 


   56 00000000 00000000 
                       B1_Tacp EQU     0x0
   57 00000000 00000000 
                       B1_PMC  EQU     0x0         ;normal
   58 00000000         
   59 00000000         ;Bank 2 parameter
   60 00000000 00000000 
                       B2_Tacs EQU     0x0         ;0 ;0clk
   61 00000000 00000003 
                       B2_Tcos EQU     0x3         ;0 ;0clk
   62 00000000 00000007 
                       B2_Tacc EQU     0x7         ;7 ;14clk
   63 00000000 00000001 
                       B2_Tcoh EQU     0x1         ;0 ;0clk
   64 00000000 00000000 
                       B2_Tah  EQU     0x0         ;0 ;0clk
   65 00000000 00000003 
                       B2_Tacp EQU     0x3
   66 00000000 00000000 
                       B2_PMC  EQU     0x0         ;normal
   67 00000000         
   68 00000000         ;Bank 3 parameter
   69 00000000 00000003 
                       B3_Tacs EQU     0x3         ;0 ;0clk
   70 00000000 00000003 
                       B3_Tcos EQU     0x3         ;0 ;0clk
   71 00000000 00000007 
                       B3_Tacc EQU     0x7         ;7 ;14clk
   72 00000000 00000003 
                       B3_Tcoh EQU     0x3         ;0 ;0clk
   73 00000000 00000003 
                       B3_Tah  EQU     0x3         ;0 ;0clk
   74 00000000 00000003 
                       B3_Tacp EQU     0x3
   75 00000000 00000000 
                       B3_PMC  EQU     0x0         ;normal
   76 00000000         
   77 00000000         ;Bank 4 parameter
   78 00000000 00000001 
                       B4_Tacs EQU     0x1         ;0 ;0clk
   79 00000000 00000001 
                       B4_Tcos EQU     0x1         ;0 ;0clk
   80 00000000 00000006 
                       B4_Tacc EQU     0x6         ;7 ;14clk
   81 00000000 00000001 
                       B4_Tcoh EQU     0x1         ;0 ;0clk
   82 00000000 00000001 
                       B4_Tah  EQU     0x1         ;0 ;0clk
   83 00000000 00000000 
                       B4_Tacp EQU     0x0
   84 00000000 00000000 
                       B4_PMC  EQU     0x0         ;normal
   85 00000000         
   86 00000000         ;Bank 5 parameter
   87 00000000 00000001 
                       B5_Tacs EQU     0x1         ;0 ;0clk
   88 00000000 00000001 
                       B5_Tcos EQU     0x1         ;0 ;0clk
   89 00000000 00000006 



ARM Macro Assembler    Page 6 


                       B5_Tacc EQU     0x6         ;7 ;14clk
   90 00000000 00000001 
                       B5_Tcoh EQU     0x1         ;0 ;0clk
   91 00000000 00000001 
                       B5_Tah  EQU     0x1         ;0 ;0clk
   92 00000000 00000000 
                       B5_Tacp EQU     0x0
   93 00000000 00000000 
                       B5_PMC  EQU     0x0         ;normal
   94 00000000         
   95 00000000                 [       {TRUE}      ; When 100MHz HCLK is used.
   96 00000000         ;Bank 6 parameter
   97 00000000 00000003 
                       B6_MT   EQU     0x3         ;SDRAM
   98 00000000 00000001 
                       B6_Trcd EQU     0x1         ;3clk
   99 00000000 00000001 
                       B6_SCAN EQU     0x1         ;9bit
  100 00000000         
  101 00000000         ;Bank 7 parameter
  102 00000000 00000003 
                       B7_MT   EQU     0x3         ;SDRAM
  103 00000000 00000001 
                       B7_Trcd EQU     0x1         ;3clk
  104 00000000 00000001 
                       B7_SCAN EQU     0x1         ;9bit
  105 00000000         
  106 00000000         ;REFRESH parameter
  107 00000000 00000001 
                       REFEN   EQU     0x1         ;Refresh enable
  108 00000000 00000000 
                       TREFMD  EQU     0x0         ;CBR(CAS before RAS)/Auto re
                                                   fresh
  109 00000000 00000001 
                       Trp     EQU     0x1         ;3clk
  110 00000000 00000001 
                       Tsrc    EQU     0x1         ;5clk Trc= Trp(3)+Tsrc(5) = 
                                                   8clock
  111 00000000 00000002 
                       Tchr    EQU     0x2         ;3clk
  112 00000000 000004F4 
                       REFCNT  EQU     1268        ;1463;1268 ;HCLK=105Mhz, (20
                                                   48+1-7.81*100);75M->1463, hz
                                                   h
  113 00000000         
  114 00000000                 |
  133                          ]
  134 00000000         
  135 00000000                 END
   14 00000000                 GET     2440addr.inc
    1 00000000         ;=======================================================
                       =============
    2 00000000         ; File Name : 2440addr.a
    3 00000000         ; Function  : S3C2440 Define Address Register (Assembly)
                       
    4 00000000         ; Date      : March 27, 2002
    5 00000000         ; Revision : Programming start (February 18,2002) -> SOP
                       
    6 00000000         ; Revision : 03.11.2003 ver 0.0 Attatched for 2440



ARM Macro Assembler    Page 7 


    7 00000000         ;=======================================================
                       =============
    8 00000000         
    9 00000000                 GBLL    BIG_ENDIAN__
   10 00000000 FALSE    
                       BIG_ENDIAN__
                               SETL    {FALSE}
   11 00000000         
   12 00000000         ;=================
   13 00000000         ; Memory control
   14 00000000         ;=================
   15 00000000 48000000 
                       BWSCON  EQU     0x48000000  ;Bus width & wait status
   16 00000000 48000004 
                       BANKCON0
                               EQU     0x48000004  ;Boot ROM control
   17 00000000 48000008 
                       BANKCON1
                               EQU     0x48000008  ;BANK1 control
   18 00000000 4800000C 
                       BANKCON2
                               EQU     0x4800000c  ;BANK2 control
   19 00000000 48000010 
                       BANKCON3
                               EQU     0x48000010  ;BANK3 control
   20 00000000 48000014 
                       BANKCON4
                               EQU     0x48000014  ;BANK4 control
   21 00000000 48000018 
                       BANKCON5
                               EQU     0x48000018  ;BANK5 control
   22 00000000 4800001C 
                       BANKCON6
                               EQU     0x4800001c  ;BANK6 control
   23 00000000 48000020 
                       BANKCON7
                               EQU     0x48000020  ;BANK7 control
   24 00000000 48000024 
                       REFRESH EQU     0x48000024  ;DRAM/SDRAM refresh
   25 00000000 48000028 
                       BANKSIZE
                               EQU     0x48000028  ;Flexible Bank Size
   26 00000000 4800002C 
                       MRSRB6  EQU     0x4800002c  ;Mode register set for SDRAM
                                                    Bank6
   27 00000000 48000030 
                       MRSRB7  EQU     0x48000030  ;Mode register set for SDRAM
                                                    Bank7
   28 00000000         
   29 00000000         
   30 00000000         ;==========================
   31 00000000         ; CLOCK & POWER MANAGEMENT
   32 00000000         ;==========================
   33 00000000 4C000000 
                       LOCKTIME
                               EQU     0x4c000000  ;PLL lock time counter
   34 00000000 4C000004 
                       MPLLCON EQU     0x4c000004  ;MPLL Control
   35 00000000 4C000008 



ARM Macro Assembler    Page 8 


                       UPLLCON EQU     0x4c000008  ;UPLL Control
   36 00000000 4C00000C 
                       CLKCON  EQU     0x4c00000c  ;Clock generator control
   37 00000000 4C000010 
                       CLKSLOW EQU     0x4c000010  ;Slow clock control
   38 00000000 4C000014 
                       CLKDIVN EQU     0x4c000014  ;Clock divider control
   39 00000000         
   40 00000000         
   41 00000000         ;=================
   42 00000000         ; INTERRUPT
   43 00000000         ;=================
   44 00000000 4A000000 
                       SRCPND  EQU     0x4a000000  ;Interrupt request status
   45 00000000 4A000004 
                       INTMOD  EQU     0x4a000004  ;Interrupt mode control
   46 00000000 4A000008 
                       INTMSK  EQU     0x4a000008  ;Interrupt mask control
   47 00000000 4A00000C 
                       PRIORITY
                               EQU     0x4a00000c  ;IRQ priority control       
                                                       <-- May 06, 2002 SOP
   48 00000000 4A000010 
                       INTPND  EQU     0x4a000010  ;Interrupt request status
   49 00000000 4A000014 
                       INTOFFSET
                               EQU     0x4a000014  ;Interruot request source of
                                                   fset
   50 00000000 4A000018 
                       SUSSRCPND
                               EQU     0x4a000018  ;Sub source pending
   51 00000000 4A00001C 
                       INTSUBMSK
                               EQU     0x4a00001c  ;Interrupt sub mask
   52 00000000         
   53 00000000         
   54 00000000         ;=================
   55 00000000         ; I/O PORT for LED
   56 00000000         ;=================
   57 00000000 56000050 
                       GPFCON  EQU     0x56000050  ;Port F control
   58 00000000 56000054 
                       GPFDAT  EQU     0x56000054  ;Port F data
   59 00000000 56000058 
                       GPFUP   EQU     0x56000058  ;Pull-up control F
   60 00000000         
   61 00000000         ;Miscellaneous register
   62 00000000 56000080 
                       MISCCR  EQU     0x56000080  ;Miscellaneous control
   63 00000000 56000084 
                       DCKCON  EQU     0x56000084  ;DCLK0/1 control
   64 00000000 56000088 
                       EXTINT0 EQU     0x56000088  ;External interrupt control 
                                                   register 0
   65 00000000 5600008C 
                       EXTINT1 EQU     0x5600008c  ;External interrupt control 
                                                   register 1
   66 00000000 56000090 
                       EXTINT2 EQU     0x56000090  ;External interrupt control 



ARM Macro Assembler    Page 9 


                                                   register 2
   67 00000000 56000094 
                       EINTFLT0
                               EQU     0x56000094  ;Reserved
   68 00000000 56000098 
                       EINTFLT1
                               EQU     0x56000098  ;Reserved
   69 00000000 5600009C 
                       EINTFLT2
                               EQU     0x5600009c  ;External interrupt filter c
                                                   ontrol register 2
   70 00000000 560000A0 
                       EINTFLT3
                               EQU     0x560000a0  ;External interrupt filter c
                                                   ontrol register 3
   71 00000000 560000A4 
                       EINTMASK
                               EQU     0x560000a4  ;External interrupt mask
   72 00000000 560000A8 
                       EINTPEND
                               EQU     0x560000a8  ;External interrupt pending
   73 00000000 560000AC 
                       GSTATUS0
                               EQU     0x560000ac  ;External pin status
   74 00000000 560000B0 
                       GSTATUS1
                               EQU     0x560000b0  ;Chip ID(0x32440000)
   75 00000000 560000B4 
                       GSTATUS2
                               EQU     0x560000b4  ;Reset type
   76 00000000 560000B8 
                       GSTATUS3
                               EQU     0x560000b8  ;Saved data0(32-bit) before 
                                                   entering POWER_OFF mode
   77 00000000 560000BC 
                       GSTATUS4
                               EQU     0x560000bc  ;Saved data1(32-bit) before 
                                                   entering POWER_OFF mode
   78 00000000         
   79 00000000         ;Added for 2440     ; DonGo
   80 00000000 560000CC 
                       MSLCON  EQU     0x560000cc  ;Memory sleep control regist
                                                   er
   81 00000000         
   82 00000000         ;=================
   83 00000000         ; WATCH DOG TIMER
   84 00000000         ;=================
   85 00000000 53000000 
                       WTCON   EQU     0x53000000  ;Watch-dog timer mode
   86 00000000 53000004 
                       WTDAT   EQU     0x53000004  ;Watch-dog timer data
   87 00000000 53000008 
                       WTCNT   EQU     0x53000008  ;Eatch-dog timer count
   88 00000000         
   89 00000000         ;=================
   90 00000000         ; Nand Flash, hzh
   91 00000000         ;=================
   92 00000000 4E000000 
                       NFCONF  EQU     0x4E000000  ;NAND Flash configuration



ARM Macro Assembler    Page 10 


   93 00000000 4E000004 
                       NFCONT  EQU     0x4E000004  ;NAND Flash control
   94 00000000 4E000008 
                       NFCMD   EQU     0x4E000008  ;NAND Flash command
   95 00000000 4E00000C 
                       NFADDR  EQU     0x4E00000C  ;NAND Flash address
   96 00000000 4E000010 
                       NFDATA  EQU     0x4E000010  ;NAND Flash data
   97 00000000 4E000010 
                       NFDATA8 EQU     0x4E000010  ;NAND Flash data
   98 00000000 4E000014 
                       NFMECCD0
                               EQU     0x4E000014  ;NAND Flash ECC for Main Are
                                                   a
   99 00000000 4E000018 
                       NFMECCD1
                               EQU     0x4E000018
  100 00000000 4E00001C 
                       NFSECCD EQU     0x4E00001C  ;NAND Flash ECC for Spare Ar
                                                   ea
  101 00000000 4E000020 
                       NFSTAT  EQU     0x4E000020  ;NAND Flash operation status
                                                   
  102 00000000 4E000024 
                       NFESTAT0
                               EQU     0x4E000024
  103 00000000 4E000028 
                       NFESTAT1
                               EQU     0x4E000028
  104 00000000 4E00002C 
                       NFMECC0 EQU     0x4E00002C
  105 00000000 4E000030 
                       NFMECC1 EQU     0x4E000030
  106 00000000 4E000034 
                       NFSECC  EQU     0x4E000034
  107 00000000 4E000038 
                       NFSBLK  EQU     0x4E000038  ;NAND Flash Start block addr
                                                   ess
  108 00000000 4E00003C 
                       NFEBLK  EQU     0x4E00003C  ;NAND Flash End block addres
                                                   s
  109 00000000         
  110 00000000                 END
   15 00000000         
   16 00000000 00400000 
                       BIT_SELFREFRESH
                               EQU     (1<<22)
   17 00000000         
   18 00000000         ;Pre-defined constants
   19 00000000 00000010 
                       USERMODE
                               EQU     0x10
   20 00000000 00000011 
                       FIQMODE EQU     0x11
   21 00000000 00000012 
                       IRQMODE EQU     0x12
   22 00000000 00000013 
                       SVCMODE EQU     0x13
   23 00000000 00000017 



ARM Macro Assembler    Page 11 


                       ABORTMODE
                               EQU     0x17
   24 00000000 0000001B 
                       UNDEFMODE
                               EQU     0x1b
   25 00000000 0000001F 
                       MODEMASK
                               EQU     0x1f
   26 00000000 000000C0 
                       NOINT   EQU     0xc0
   27 00000000         
   28 00000000         ;The location of stacks
   29 00000000 33FF4800 
                       UserStack
                               EQU     (_STACK_BASEADDRESS-0x3800) 
                                                   ;0x33ff4800 ~
   30 00000000 33FF5800 
                       SVCStack
                               EQU     (_STACK_BASEADDRESS-0x2800) 
                                                   ;0x33ff5800 ~
   31 00000000 33FF5C00 
                       UndefStack
                               EQU     (_STACK_BASEADDRESS-0x2400) 
                                                   ;0x33ff5c00 ~
   32 00000000 33FF6000 
                       AbortStack
                               EQU     (_STACK_BASEADDRESS-0x2000) 
                                                   ;0x33ff6000 ~
   33 00000000 33FF7000 
                       IRQStack
                               EQU     (_STACK_BASEADDRESS-0x1000) 
                                                   ;0x33ff7000 ~
   34 00000000 33FF8000 
                       FIQStack
                               EQU     (_STACK_BASEADDRESS-0x0) ;0x33ff8000 ~
   35 00000000         
   36 00000000         ;Check if tasm.exe(armasm -16 ...@ADS 1.0) is used.
   37 00000000                 GBLL    THUMBCODE
   38 00000000                 [       {CONFIG} = 16
   42 00000000 FALSE    
                       THUMBCODE
                               SETL    {FALSE}
   43 00000000                 ]
   44 00000000         
   45 00000000                 MACRO
   46 00000000                 MOV_PC_LR
   47 00000000                 [       THUMBCODE
   48 00000000                 bx      lr
   49 00000000                 |
   50 00000000                 mov     pc,lr
   51 00000000                 ]
   52 00000000                 MEND
   53 00000000         
   54 00000000                 MACRO
   55 00000000                 MOVEQ_PC_LR
   56 00000000                 [       THUMBCODE
   57 00000000                 bxeq    lr
   58 00000000                 |
   59 00000000                 moveq   pc,lr



ARM Macro Assembler    Page 12 


   60 00000000                 ]
   61 00000000                 MEND
   62 00000000         
   63 00000000                 MACRO
   64 00000000         $HandlerLabel
                               HANDLER $HandleLabel
   65 00000000         
   66 00000000         $HandlerLabel
   67 00000000                 sub     sp,sp,#4    ;decrement sp(to store jump 
                                                   address)
   68 00000000                 stmfd   sp!,{r0}    ;PUSH the work register to s
                                                   tack(lr does not push becaus
                                                   e it return to original addr
                                                   ess)
   69 00000000                 ldr     r0,=$HandleLabel ;load the address of Ha
                                                   ndleXXX to r0
   70 00000000                 ldr     r0,[r0]     ;load the contents(service r
                                                   outine start address) of Han
                                                   dleXXX
   71 00000000                 str     r0,[sp,#4]  ;store the contents(ISR) of 
                                                   HandleXXX to stack
   72 00000000                 ldmfd   sp!,{r0,pc} ;POP the work register and p
                                                   c(jump to ISR)
   73 00000000                 MEND
   74 00000000         
   75 00000000                 IMPORT  |Image$$RO$$Base| ; Base of ROM code
   76 00000000                 IMPORT  |Image$$RO$$Limit| ; End of ROM code (=s
                                                   tart of ROM data)
   77 00000000                 IMPORT  |Image$$RW$$Base| 
                                                   ; Base of RAM to initialise
   78 00000000                 IMPORT  |Image$$ZI$$Base| 
                                                   ; Base and limit of area
   79 00000000                 IMPORT  |Image$$ZI$$Limit| ; to zero initialise
   80 00000000         
   81 00000000                 IMPORT  MMU_SetAsyncBusMode
   82 00000000                 IMPORT  MMU_SetFastBusMode ;hzh
   83 00000000         
   84 00000000                 IMPORT  Main        ; The main entry of mon prog
                                                   ram
   85 00000000         
   86 00000000                 AREA    Init,CODE,READONLY
   87 00000000         
   88 00000000                 ENTRY
   89 00000000         
   90 00000000                 EXPORT  __ENTRY
   91 00000000         __ENTRY
   92 00000000         ResetEntry
   93 00000000         ;1)The code, which converts to Big-endian, should be in 
                       little endian code.
   94 00000000         ;2)The following little endian code will be compiled in 
                       Big-Endian mode.
   95 00000000         ;  The code byte order should be changed as the memory b
                       us width.
   96 00000000         ;3)The pseudo instruction,DCD can not be used here becau
                       se the linker generates error.
   97 00000000                 ASSERT  :DEF:ENDIAN_CHANGE
   98 00000000                 [       ENDIAN_CHANGE
  112 00000000 EAFFFFFE        b       ResetHandler
  113 00000004                 ]



ARM Macro Assembler    Page 13 


  114 00000004 EAFFFFFE        b       HandlerUndef ;handler for Undefined mode
                                                   
  115 00000008 EAFFFFFE        b       HandlerSWI  ;handler for SWI interrupt
  116 0000000C EAFFFFFE        b       HandlerPabort ;handler for PAbort
  117 00000010 EAFFFFFE        b       HandlerDabort ;handler for DAbort
  118 00000014 EAFFFFFE        b       .           ;reserved
  119 00000018 EAFFFFFE        b       HandlerIRQ  ;handler for IRQ interrupt
  120 0000001C EAFFFFFE        b       HandlerFIQ  ;handler for FIQ interrupt
  121 00000020         
  122 00000020         ;@0x20
  123 00000020 EAFFFFFE        b       EnterPWDN   ; Must be @0x20.
  124 00000024         ChangeBigEndian
  125 00000024         ;@0x24
  126 00000024                 [       ENTRY_BUS_WIDTH=32
  130                          ]
  131 00000024                 [       ENTRY_BUS_WIDTH=16
  132 00000024 0F10EE11        DCD     0x0f10ee11
  133 00000028 0080E380        DCD     0x0080e380
  134 0000002C 0F10EE01        DCD     0x0f10ee01
  135 00000030                 ]
  136 00000030                 [       ENTRY_BUS_WIDTH=8
  140                          ]
  141 00000030 FFFFFFFF        DCD     0xffffffff  ;swinv 0xffffff is similar w
                                                   ith NOP and run well in both
                                                    endian mode.
  142 00000034 FFFFFFFF        DCD     0xffffffff
  143 00000038 FFFFFFFF        DCD     0xffffffff
  144 0000003C FFFFFFFF        DCD     0xffffffff
  145 00000040 FFFFFFFF        DCD     0xffffffff
  146 00000044 EAFFFFFE        b       ResetHandler
  147 00000048         
  148 00000048         HandlerFIQ
                               HANDLER HandleFIQ
   65 00000048         
   66 00000048         HandlerFIQ
   67 00000048 E24DD004        sub     sp,sp,#4    ;decrement sp(to store jump 
                                                   address)
   68 0000004C E92D0001        stmfd   sp!,{r0}    ;PUSH the work register to s
                                                   tack(lr does not push becaus
                                                   e it return to original addr
                                                   ess)
   69 00000050 E59F00A4        ldr     r0,=HandleFIQ ;load the address of Handl
                                                   eXXX to r0
   70 00000054 E5900000        ldr     r0,[r0]     ;load the contents(service r
                                                   outine start address) of Han
                                                   dleXXX
   71 00000058 E58D0004        str     r0,[sp,#4]  ;store the contents(ISR) of 
                                                   HandleXXX to stack
   72 0000005C E8BD8001        ldmfd   sp!,{r0,pc} ;POP the work register and p
                                                   c(jump to ISR)
  149 00000060         HandlerIRQ
                               HANDLER HandleIRQ
   65 00000060         
   66 00000060         HandlerIRQ
   67 00000060 E24DD004        sub     sp,sp,#4    ;decrement sp(to store jump 
                                                   address)
   68 00000064 E92D0001        stmfd   sp!,{r0}    ;PUSH the work register to s
                                                   tack(lr does not push becaus
                                                   e it return to original addr



ARM Macro Assembler    Page 14 


                                                   ess)
   69 00000068 E59F0090        ldr     r0,=HandleIRQ ;load the address of Handl
                                                   eXXX to r0
   70 0000006C E5900000        ldr     r0,[r0]     ;load the contents(service r
                                                   outine start address) of Han
                                                   dleXXX
   71 00000070 E58D0004        str     r0,[sp,#4]  ;store the contents(ISR) of 
                                                   HandleXXX to stack
   72 00000074 E8BD8001        ldmfd   sp!,{r0,pc} ;POP the work register and p
                                                   c(jump to ISR)
  150 00000078         HandlerUndef
                               HANDLER HandleUndef
   65 00000078         
   66 00000078         HandlerUndef
   67 00000078 E24DD004        sub     sp,sp,#4    ;decrement sp(to store jump 
                                                   address)
   68 0000007C E92D0001        stmfd   sp!,{r0}    ;PUSH the work register to s
                                                   tack(lr does not push becaus
                                                   e it return to original addr
                                                   ess)
   69 00000080 E59F007C        ldr     r0,=HandleUndef ;load the address of Han
                                                   dleXXX to r0
   70 00000084 E5900000        ldr     r0,[r0]     ;load the contents(service r
                                                   outine start address) of Han
                                                   dleXXX
   71 00000088 E58D0004        str     r0,[sp,#4]  ;store the contents(ISR) of 
                                                   HandleXXX to stack
   72 0000008C E8BD8001        ldmfd   sp!,{r0,pc} ;POP the work register and p
                                                   c(jump to ISR)
  151 00000090         HandlerSWI
                               HANDLER HandleSWI
   65 00000090         
   66 00000090         HandlerSWI
   67 00000090 E24DD004        sub     sp,sp,#4    ;decrement sp(to store jump 
                                                   address)
   68 00000094 E92D0001        stmfd   sp!,{r0}    ;PUSH the work register to s
                                                   tack(lr does not push becaus
                                                   e it return to original addr
                                                   ess)
   69 00000098 E59F0068        ldr     r0,=HandleSWI ;load the address of Handl
                                                   eXXX to r0
   70 0000009C E5900000        ldr     r0,[r0]     ;load the contents(service r
                                                   outine start address) of Han
                                                   dleXXX
   71 000000A0 E58D0004        str     r0,[sp,#4]  ;store the contents(ISR) of 
                                                   HandleXXX to stack
   72 000000A4 E8BD8001        ldmfd   sp!,{r0,pc} ;POP the work register and p
                                                   c(jump to ISR)
  152 000000A8         HandlerDabort
                               HANDLER HandleDabort
   65 000000A8         
   66 000000A8         HandlerDabort
   67 000000A8 E24DD004        sub     sp,sp,#4    ;decrement sp(to store jump 
                                                   address)
   68 000000AC E92D0001        stmfd   sp!,{r0}    ;PUSH the work register to s
                                                   tack(lr does not push becaus
                                                   e it return to original addr
                                                   ess)
   69 000000B0 E59F0054        ldr     r0,=HandleDabort ;load the address of Ha



ARM Macro Assembler    Page 15 


                                                   ndleXXX to r0
   70 000000B4 E5900000        ldr     r0,[r0]     ;load the contents(service r
                                                   outine start address) of Han
                                                   dleXXX
   71 000000B8 E58D0004        str     r0,[sp,#4]  ;store the contents(ISR) of 
                                                   HandleXXX to stack
   72 000000BC E8BD8001        ldmfd   sp!,{r0,pc} ;POP the work register and p
                                                   c(jump to ISR)
  153 000000C0         HandlerPabort
                               HANDLER HandlePabort
   65 000000C0         
   66 000000C0         HandlerPabort
   67 000000C0 E24DD004        sub     sp,sp,#4    ;decrement sp(to store jump 
                                                   address)
   68 000000C4 E92D0001        stmfd   sp!,{r0}    ;PUSH the work register to s
                                                   tack(lr does not push becaus
                                                   e it return to original addr
                                                   ess)
   69 000000C8 E59F0040        ldr     r0,=HandlePabort ;load the address of Ha
                                                   ndleXXX to r0
   70 000000CC E5900000        ldr     r0,[r0]     ;load the contents(service r
                                                   outine start address) of Han
                                                   dleXXX
   71 000000D0 E58D0004        str     r0,[sp,#4]  ;store the contents(ISR) of 
                                                   HandleXXX to stack
   72 000000D4 E8BD8001        ldmfd   sp!,{r0,pc} ;POP the work register and p
                                                   c(jump to ISR)
  154 000000D8         
  155 000000D8         IsrIRQ
  156 000000D8 E24DD004        sub     sp,sp,#4    ;reserved for PC
  157 000000DC E92D0300        stmfd   sp!,{r8-r9}
  158 000000E0         
  159 000000E0 E59F902C        ldr     r9,=INTOFFSET
  160 000000E4 E5999000        ldr     r9,[r9]
  161 000000E8 E59F8028        ldr     r8,=HandleEINT0
  162 000000EC E0888109        add     r8,r8,r9,lsl #2
  163 000000F0 E5988000        ldr     r8,[r8]
  164 000000F4 E58D8008        str     r8,[sp,#8]
  165 000000F8 E8BD8300        ldmfd   sp!,{r8-r9,pc}
  166 000000FC         
  167 000000FC         
  168 000000FC 33FFFF1C 
              33FFFF18 
              33FFFF04 
              33FFFF08 
              33FFFF10 
              33FFFF0C 
              4A000014 
              33FFFF20         LTORG
  169 0000011C         
  170 0000011C         ;=======
  171 0000011C         ; ENTRY
  172 0000011C         ;=======
  173 0000011C         ResetHandler
  174 0000011C E3A00453        ldr     r0,=WTCON   ;watch dog disable
  175 00000120 E3A01000        ldr     r1,=0x0
  176 00000124 E5801000        str     r1,[r0]
  177 00000128         
  178 00000128 E59F0448        ldr     r0,=INTMSK



ARM Macro Assembler    Page 16 


  179 0000012C E3E01000        ldr     r1,=0xffffffff ;all interrupt disable
  180 00000130 E5801000        str     r1,[r0]
  181 00000134         
  182 00000134 E59F0440        ldr     r0,=INTSUBMSK
  183 00000138 E59F1440        ldr     r1,=0x7fff  ;all sub interrupt disable
  184 0000013C E5801000        str     r1,[r0]
  185 00000140         
  186 00000140                 [       {FALSE}
  195                          ]
  196 00000140         
  197 00000140         ;To reduce PLL lock time, adjust the LOCKTIME register.
  198 00000140 E3A0044C        ldr     r0,=LOCKTIME
  199 00000144 E3E014FF        ldr     r1,=0xffffff
  200 00000148 E5801000        str     r1,[r0]
  201 0000014C         
  202 0000014C                 [       PLL_ON_START
  203 0000014C         ; Added for confirm clock divide. for 2440.
  204 0000014C         ; Setting value Fclk:Hclk:Pclk
  205 0000014C E59F0430        ldr     r0,=CLKDIVN
  206 00000150 E3A01005        ldr     r1,=CLKDIV_VAL ; 0=1:1:1, 1=1:1:2, 2=1:2
                                                   :2, 3=1:2:4, 4=1:4:4, 5=1:4:
                                                   8, 6=1:3:3, 7=1:3:6.
  207 00000154 E5801000        str     r1,[r0]
  208 00000158         ; MMU_SetAsyncBusMode and MMU_SetFastBusMode over 4K, so
                        do not call here
  209 00000158         ; call it after copy, hzh
  210 00000158         ; [ CLKDIV_VAL>1   ; means Fclk:Hclk is not 1:1.
  211 00000158         ; bl MMU_SetAsyncBusMode
  212 00000158         ; |
  213 00000158         ; bl MMU_SetFastBusMode ; default value.
  214 00000158         ; ]
  215 00000158         ;program has not been copied, so use these directly, hzh
                       
  216 00000158                 [       CLKDIV_VAL>1 ; means Fclk:Hclk is not 1:
                                                   1.
  217 00000158 EE110F10        mrc     p15,0,r0,c1,c0,0
  218 0000015C E38004C0        orr     r0,r0,#0xc0000000 ;R1_nF:OR:R1_iA
  219 00000160 EE010F10        mcr     p15,0,r0,c1,c0,0
  220 00000164                 |
  224                          ]
  225 00000164         
  226 00000164         ;Configure UPLL
  227 00000164 E59F041C        ldr     r0,=UPLLCON
  228 00000168 E59F141C        ldr     r1,=((U_MDIV<<12)+(U_PDIV<<4)+U_SDIV)
  229 0000016C E5801000        str     r1,[r0]
  230 00000170 E1A00000        nop                 ; Caution: After UPLL settin
                                                   g, at least 7-clocks delay m
                                                   ust be inserted for setting 
                                                   hardware be completed.
  231 00000174 E1A00000        nop
  232 00000178 E1A00000        nop
  233 0000017C E1A00000        nop
  234 00000180 E1A00000        nop
  235 00000184 E1A00000        nop
  236 00000188 E1A00000        nop
  237 0000018C         ;Configure MPLL
  238 0000018C E59F03FC        ldr     r0,=MPLLCON
  239 00000190 E59F13FC        ldr     r1,=((M_MDIV<<12)+(M_PDIV<<4)+M_SDIV) 
                                                   ;Fin=16.9344MHz



ARM Macro Assembler    Page 17 


  240 00000194 E5801000        str     r1,[r0]
  241 00000198                 ]
  242 00000198         
  243 00000198         ;Check if the boot is caused by the wake-up from SLEEP m
                       ode.
  244 00000198 E59F13F8        ldr     r1,=GSTATUS2
  245 0000019C E5910000        ldr     r0,[r1]
  246 000001A0 E3100002        tst     r0,#0x2
  247 000001A4         ;In case of the wake-up from SLEEP mode, go to SLEEP_WAK
                       EUP handler.
  248 000001A4 1AFFFFFE        bne     WAKEUP_SLEEP
  249 000001A8         
  250 000001A8                 EXPORT  StartPointAfterSleepWakeUp
  251 000001A8         StartPointAfterSleepWakeUp
  252 000001A8         
  253 000001A8         ;Set memory control registers
  254 000001A8         ;ldr r0,=SMRDATA
  255 000001A8 E28F0B01 
              E2800E03         adrl    r0, SMRDATA ;be careful!, hzh
  256 000001B0 E3A01448        ldr     r1,=BWSCON  ;BWSCON Address
  257 000001B4 E2802034        add     r2, r0, #52 ;End address of SMRDATA
  258 000001B8         
  259 000001B8         0
  260 000001B8 E4903004        ldr     r3, [r0], #4
  261 000001BC E4813004        str     r3, [r1], #4
  262 000001C0 E1520000        cmp     r2, r0
  263 000001C4 1AFFFFFB        bne     %B0
  264 000001C8         
  265 000001C8         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  266 000001C8         ;;;;;;;;;;;;;       When EINT0 is pressed,  Clear SDRAM 
                       
  267 000001C8         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  268 000001C8         ; check if EIN0 button is pressed
  269 000001C8         
  270 000001C8 E59F03CC        ldr     r0,=GPFCON
  271 000001CC E3A01000        ldr     r1,=0x0
  272 000001D0 E5801000        str     r1,[r0]
  273 000001D4 E59F03C4        ldr     r0,=GPFUP
  274 000001D8 E3A010FF        ldr     r1,=0xff
  275 000001DC E5801000        str     r1,[r0]
  276 000001E0         
  277 000001E0 E59F13BC        ldr     r1,=GPFDAT
  278 000001E4 E5910000        ldr     r0,[r1]
  279 000001E8 E3C0003C        bic     r0,r0,#(0x1e<<1) ; bit clear
  280 000001EC E3100001        tst     r0,#0x1
  281 000001F0 1A000012        bne     %F1
  282 000001F4         
  283 000001F4         
  284 000001F4         
  285 000001F4         ; Clear SDRAM Start
  286 000001F4         
  287 000001F4 E59F03A0        ldr     r0,=GPFCON
  288 000001F8 E59F13A8        ldr     r1,=0x55aa
  289 000001FC E5801000        str     r1,[r0]
  290 00000200         ; ldr r0,=GPFUP
  291 00000200         ; ldr r1,=0xff
  292 00000200         ; str r1,[r0]



ARM Macro Assembler    Page 18 


  293 00000200 E59F039C        ldr     r0,=GPFDAT
  294 00000204 E3A01000        ldr     r1,=0x0
  295 00000208 E5801000        str     r1,[r0]     ;LED=****
  296 0000020C         
  297 0000020C E3A01000        mov     r1,#0
  298 00000210 E3A02000        mov     r2,#0
  299 00000214 E3A03000        mov     r3,#0
  300 00000218 E3A04000        mov     r4,#0
  301 0000021C E3A05000        mov     r5,#0
  302 00000220 E3A06000        mov     r6,#0
  303 00000224 E3A07000        mov     r7,#0
  304 00000228 E3A08000        mov     r8,#0
  305 0000022C         
  306 0000022C E3A09640        ldr     r9,=0x4000000 ;64MB
  307 00000230 E3A005C0        ldr     r0,=0x30000000
  308 00000234         0
  309 00000234 E8A001FE        stmia   r0!,{r1-r8}
  310 00000238 E2599020        subs    r9,r9,#32
  311 0000023C 1AFFFFFC        bne     %B0
  312 00000240         
  313 00000240         ;Clear SDRAM End
  314 00000240         
  315 00000240         1
  316 00000240         
  317 00000240         ;Initialize stacks
  318 00000240 EBFFFFFE        bl      InitStacks
  319 00000244         
  320 00000244         ;=======================================================
                       ====
  321 00000244         ;bl Led_Test
  322 00000244         
  323 00000244 E3A00448        ldr     r0, =BWSCON
  324 00000248 E5900000        ldr     r0, [r0]
  325 0000024C E2100006        ands    r0, r0, #6  ;OM[1:0] != 0, NOR FLash boo
                                                   t
  326 00000250 1AFFFFFE        bne     copy_proc_beg ;do not read nand flash
  327 00000254 E24F0F97        adr     r0, ResetEntry ;OM[1:0] == 0, NAND FLash
                                                    boot
  328 00000258 E3500000        cmp     r0, #0      ;if use Multi-ice, 
  329 0000025C 1AFFFFFE        bne     copy_proc_beg ;do not read nand flash fo
                                                   r boot
  330 00000260         ;nop
  331 00000260         ;=======================================================
                       ====
  332 00000260         nand_boot_beg
  333 00000260 E3A0544E        mov     r5, #NFCONF
  334 00000264         ;set timing value
  335 00000264 E59F0340        ldr     r0, =(7<<12)|(7<<8)|(7<<4)
  336 00000268 E5850000        str     r0, [r5]
  337 0000026C         ;enable control
  338 0000026C E3A00073        ldr     r0, =(0<<13)|(0<<12)|(0<<10)|(0<<9)|(0<<
8)|(1<<6)|(1<<5)|(1<<4)|(1<<1)|(1<<0)
  339 00000270 E5850004        str     r0, [r5, #4]
  340 00000274         
  341 00000274 EBFFFFFE        bl      ReadNandID
  342 00000278 E3A06000        mov     r6, #0
  343 0000027C E59F032C        ldr     r0, =0xec73
  344 00000280 E1550000        cmp     r5, r0
  345 00000284 0A000003        beq     %F1



ARM Macro Assembler    Page 19 


  346 00000288 E59F0324        ldr     r0, =0xec75
  347 0000028C E1550000        cmp     r5, r0
  348 00000290 0A000000        beq     %F1
  349 00000294 E3A06001        mov     r6, #1
  350 00000298         1
  351 00000298 EBFFFFFE        bl      ReadNandStatus
  352 0000029C         
  353 0000029C E3A08000        mov     r8, #0
  354 000002A0 E59F9310        ldr     r9, =ResetEntry
  355 000002A4         2
  356 000002A4 E218001F        ands    r0, r8, #0x1f
  357 000002A8 1A000004        bne     %F3
  358 000002AC E1A00008        mov     r0, r8
  359 000002B0 EBFFFFFE        bl      CheckBadBlk
  360 000002B4 E3500000        cmp     r0, #0
  361 000002B8 12888020        addne   r8, r8, #32
  362 000002BC 1A000004        bne     %F4
  363 000002C0         3
  364 000002C0 E1A00008        mov     r0, r8
  365 000002C4 E1A01009        mov     r1, r9
  366 000002C8 EBFFFFFE        bl      ReadNandPage
  367 000002CC E2899F80        add     r9, r9, #512
  368 000002D0 E2888001        add     r8, r8, #1
  369 000002D4         4
  370 000002D4 E3580F40        cmp     r8, #256
  371 000002D8 3AFFFFF1        bcc     %B2
  372 000002DC         
  373 000002DC E3A0544E        mov     r5, #NFCONF ;DsNandFlash
  374 000002E0 E5950004        ldr     r0, [r5, #4]
  375 000002E4 E3C00001        bic     r0, r0, #1
  376 000002E8 E5850004        str     r0, [r5, #4]
  377 000002EC E59FF2C8        ldr     pc, =copy_proc_beg
  378 000002F0         ;=======================================================
                       ====
  379 000002F0         copy_proc_beg
  380 000002F0 E24F0FBE        adr     r0, ResetEntry
  381 000002F4 E59F2318        ldr     r2, BaseOfROM
  382 000002F8 E1500002        cmp     r0, r2
  383 000002FC 059F0314        ldreq   r0, TopOfROM
  384 00000300 0AFFFFFE        beq     InitRam
  385 00000304 E59F330C        ldr     r3, TopOfROM
  386 00000308         0
  387 00000308 E8B000F0        ldmia   r0!, {r4-r7}
  388 0000030C E8A200F0        stmia   r2!, {r4-r7}
  389 00000310 E1520003        cmp     r2, r3
  390 00000314 3AFFFFFB        bcc     %B0
  391 00000318         
  392 00000318 E0422003        sub     r2, r2, r3
  393 0000031C E0400002        sub     r0, r0, r2
  394 00000320         
  395 00000320         InitRam
  396 00000320 E59F22F4        ldr     r2, BaseOfBSS
  397 00000324 E59F32F4        ldr     r3, BaseOfZero
  398 00000328         0
  399 00000328 E1520003        cmp     r2, r3
  400 0000032C 34901004        ldrcc   r1, [r0], #4
  401 00000330 34821004        strcc   r1, [r2], #4
  402 00000334 3AFFFFFB        bcc     %B0
  403 00000338         



ARM Macro Assembler    Page 20 


  404 00000338 E3A00000        mov     r0, #0
  405 0000033C E59F32E0        ldr     r3, EndOfBSS
  406 00000340         1
  407 00000340 E1520003        cmp     r2, r3
  408 00000344 34820004        strcc   r0, [r2], #4
  409 00000348 3AFFFFFC        bcc     %B1
  410 0000034C         
  411 0000034C E59FF26C        ldr     pc, =%F2    ;goto compiler address
  412 00000350         2
  413 00000350         
  414 00000350         ; [ CLKDIV_VAL>1   ; means Fclk:Hclk is not 1:1.
  415 00000350         ; bl MMU_SetAsyncBusMode
  416 00000350         ; |
  417 00000350         ; bl MMU_SetFastBusMode ; default value.
  418 00000350         ; ]
  419 00000350         
  420 00000350         ;bl Led_Test
  421 00000350         
  422 00000350         ;=======================================================
                       ====
  423 00000350         ; Setup IRQ handler
  424 00000350 E51F0258        ldr     r0,=HandleIRQ ;This routine is needed
  425 00000354 E59F126C        ldr     r1,=IsrIRQ  ;if there is not 'subs pc,lr
                                                   ,#4' at 0x18, 0x1c
  426 00000358 E5801000        str     r1,[r0]
  427 0000035C         
  428 0000035C         ; ;Copy and paste RW data/zero initialized data
  429 0000035C         ; ldr r0, =|Image$$RO$$Limit| ; Get pointer to ROM data
  430 0000035C         ; ldr r1, =|Image$$RW$$Base|  ; and RAM copy
  431 0000035C         ; ldr r3, =|Image$$ZI$$Base|
  432 0000035C         ;
  433 0000035C         ; ;Zero init base => top of initialised data
  434 0000035C         ; cmp r0, r1      ; Check that they are different
  435 0000035C         ; beq %F2
  436 0000035C         ;1
  437 0000035C         ; cmp r1, r3      ; Copy init data
  438 0000035C         ; ldrcc r2, [r0], #4    ;--> LDRCC r2, [r0] + ADD r0, r0
                       , #4
  439 0000035C         ; strcc r2, [r1], #4    ;--> STRCC r2, [r1] + ADD r1, r1
                       , #4
  440 0000035C         ; bcc %B1
  441 0000035C         ;2
  442 0000035C         ; ldr r1, =|Image$$ZI$$Limit| ; Top of zero init segment
                       
  443 0000035C         ; mov r2, #0
  444 0000035C         ;3
  445 0000035C         ; cmp r3, r1      ; Zero init
  446 0000035C         ; strcc r2, [r3], #4
  447 0000035C         ; bcc %B3
  448 0000035C         
  449 0000035C         
  450 0000035C                 [       :LNOT:THUMBCODE
  451 0000035C EBFFFFFE        bl      Main        ;Do not use main() because .
                                                   .....
  452 00000360         ;ldr pc, =Main ;hzh
  453 00000360 EAFFFFFE        b       .
  454 00000364                 ]
  455 00000364         
  456 00000364                 [       THUMBCODE   ;for start-up code for Thumb



ARM Macro Assembler    Page 21 


                                                    mode
  463                          ]
  464 00000364         
  465 00000364         
  466 00000364         ;function initializing stacks
  467 00000364         InitStacks
  468 00000364         ;Do not use DRAM,such as stmfd,ldmfd......
  469 00000364         ;SVCstack is initialized before
  470 00000364         ;Under toolkit ver 2.5, 'msr cpsr,r1' can be used instea
                       d of 'msr cpsr_cxsf,r1'
  471 00000364 E10F0000        mrs     r0,cpsr
  472 00000368 E3C0001F        bic     r0,r0,#MODEMASK
  473 0000036C E38010DB        orr     r1,r0,#UNDEFMODE|NOINT
  474 00000370 E12FF001        msr     cpsr_cxsf,r1 ;UndefMode
  475 00000374 E59FD250        ldr     sp,=UndefStack ; UndefStack=0x33FF_5C00
  476 00000378         
  477 00000378 E38010D7        orr     r1,r0,#ABORTMODE|NOINT
  478 0000037C E12FF001        msr     cpsr_cxsf,r1 ;AbortMode
  479 00000380 E59FD248        ldr     sp,=AbortStack ; AbortStack=0x33FF_6000
  480 00000384         
  481 00000384 E38010D2        orr     r1,r0,#IRQMODE|NOINT
  482 00000388 E12FF001        msr     cpsr_cxsf,r1 ;IRQMode
  483 0000038C E59FD240        ldr     sp,=IRQStack ; IRQStack=0x33FF_7000
  484 00000390         
  485 00000390 E38010D1        orr     r1,r0,#FIQMODE|NOINT
  486 00000394 E12FF001        msr     cpsr_cxsf,r1 ;FIQMode
  487 00000398 E59FD238        ldr     sp,=FIQStack ; FIQStack=0x33FF_8000
  488 0000039C         
  489 0000039C E3C000DF        bic     r0,r0,#MODEMASK|NOINT
  490 000003A0 E3801013        orr     r1,r0,#SVCMODE
  491 000003A4 E12FF001        msr     cpsr_cxsf,r1 ;SVCMode
  492 000003A8 E59FD22C        ldr     sp,=SVCStack ; SVCStack=0x33FF_5800
  493 000003AC         
  494 000003AC         ;USER mode has not be initialized.
  495 000003AC         
  496 000003AC E1A0F00E        mov     pc,lr
  497 000003B0         ;The LR register will not be valid if the current mode i
                       s not SVC mode.
  498 000003B0         
  499 000003B0         ;=======================================================
                       ====
  500 000003B0         ReadNandID
  501 000003B0 E3A0744E        mov     r7,#NFCONF
  502 000003B4 E5970004        ldr     r0,[r7,#4]  ;NFChipEn();
  503 000003B8 E3C00002        bic     r0,r0,#2
  504 000003BC E5870004        str     r0,[r7,#4]
  505 000003C0 E3A00090        mov     r0,#0x90    ;WrNFCmd(RdIDCMD);
  506 000003C4 E5C70008        strb    r0,[r7,#8]
  507 000003C8 E3A04000        mov     r4,#0       ;WrNFAddr(0);
  508 000003CC E5C7400C        strb    r4,[r7,#0xc]
  509 000003D0         1                           ;while(NFIsBusy());
  510 000003D0 E5970020        ldr     r0,[r7,#0x20]
  511 000003D4 E3100001        tst     r0,#1
  512 000003D8 0AFFFFFC        beq     %B1
  513 000003DC E5D70010        ldrb    r0,[r7,#0x10] ;id  = RdNFDat()<<8;
  514 000003E0 E1A00400        mov     r0,r0,lsl #8
  515 000003E4 E5D71010        ldrb    r1,[r7,#0x10] ;id |= RdNFDat();
  516 000003E8 E1815000        orr     r5,r1,r0
  517 000003EC E5970004        ldr     r0,[r7,#4]  ;NFChipDs();



ARM Macro Assembler    Page 22 


  518 000003F0 E3800002        orr     r0,r0,#2
  519 000003F4 E5870004        str     r0,[r7,#4]
  520 000003F8 E1A0F00E        mov     pc,lr
  521 000003FC         
  522 000003FC         ReadNandStatus
  523 000003FC E3A0744E        mov     r7,#NFCONF
  524 00000400 E5970004        ldr     r0,[r7,#4]  ;NFChipEn();
  525 00000404 E3C00002        bic     r0,r0,#2
  526 00000408 E5870004        str     r0,[r7,#4]
  527 0000040C E3A00070        mov     r0,#0x70    ;WrNFCmd(QUERYCMD);
  528 00000410 E5C70008        strb    r0,[r7,#8]
  529 00000414 E5D71010        ldrb    r1,[r7,#0x10] ;r1 = RdNFDat();
  530 00000418 E5970004        ldr     r0,[r7,#4]  ;NFChipDs();
  531 0000041C E3800002        orr     r0,r0,#2
  532 00000420 E5870004        str     r0,[r7,#4]
  533 00000424 E1A0F00E        mov     pc,lr
  534 00000428         
  535 00000428         WaitNandBusy
  536 00000428 E3A00070        mov     r0,#0x70    ;WrNFCmd(QUERYCMD);
  537 0000042C E3A0144E        mov     r1,#NFCONF
  538 00000430 E5C10008        strb    r0,[r1,#8]
  539 00000434         1                           ;while(!(RdNFDat()&0x40)); 
  540 00000434 E5D10010        ldrb    r0,[r1,#0x10]
  541 00000438 E3100040        tst     r0,#0x40
  542 0000043C 0AFFFFFC        beq     %B1
  543 00000440 E3A00000        mov     r0,#0       ;WrNFCmd(READCMD0);
  544 00000444 E5C10008        strb    r0,[r1,#8]
  545 00000448 E1A0F00E        mov     pc,lr
  546 0000044C         
  547 0000044C         CheckBadBlk
  548 0000044C E1A0700E        mov     r7, lr
  549 00000450 E3A0544E        mov     r5, #NFCONF
  550 00000454         
  551 00000454 E3C0001F        bic     r0,r0,#0x1f ;addr &= ~0x1f;
  552 00000458 E5951004        ldr     r1,[r5,#4]  ;NFChipEn()
  553 0000045C E3C11002        bic     r1,r1,#2
  554 00000460 E5851004        str     r1,[r5,#4]
  555 00000464         
  556 00000464 E3A01050        mov     r1,#0x50    ;WrNFCmd(READCMD2)
  557 00000468 E5C51008        strb    r1,[r5,#8]
  558 0000046C E3A01005        mov     r1, #5      ;6  ;6->5
  559 00000470 E5C5100C        strb    r1,[r5,#0xc] ;WrNFAddr(5);(6) 6->5
  560 00000474 E5C5000C        strb    r0,[r5,#0xc] ;WrNFAddr(addr)
  561 00000478 E1A01420        mov     r1,r0,lsr #8 ;WrNFAddr(addr>>8)
  562 0000047C E5C5100C        strb    r1,[r5,#0xc]
  563 00000480 E3560000        cmp     r6,#0       ;if(NandAddr)  
  564 00000484 11A00820        movne   r0,r0,lsr #16 ;WrNFAddr(addr>>16)
  565 00000488 15C5000C        strneb  r0,[r5,#0xc]
  566 0000048C         
  567 0000048C         ; bl  WaitNandBusy ;WaitNFBusy()
  568 0000048C         ;do not use WaitNandBusy, after WaitNandBusy will read p
                       art A!
  569 0000048C E3A00064        mov     r0, #100
  570 00000490         1
  571 00000490 E2500001        subs    r0, r0, #1
  572 00000494 1AFFFFFD        bne     %B1
  573 00000498         2
  574 00000498 E5950020        ldr     r0, [r5, #0x20]
  575 0000049C E3100001        tst     r0, #1



ARM Macro Assembler    Page 23 


  576 000004A0 0AFFFFFC        beq     %B2
  577 000004A4         
  578 000004A4 E5D50010        ldrb    r0, [r5,#0x10] ;RdNFDat()
  579 000004A8 E24000FF        sub     r0, r0, #0xff
  580 000004AC         
  581 000004AC E3A01000        mov     r1,#0       ;WrNFCmd(READCMD0)
  582 000004B0 E5C51008        strb    r1,[r5,#8]
  583 000004B4         
  584 000004B4 E5951004        ldr     r1,[r5,#4]  ;NFChipDs()
  585 000004B8 E3811002        orr     r1,r1,#2
  586 000004BC E5851004        str     r1,[r5,#4]
  587 000004C0         
  588 000004C0 E1A0F007        mov     pc, r7
  589 000004C4         
  590 000004C4         ReadNandPage
  591 000004C4 E1A0700E        mov     r7,lr
  592 000004C8 E1A04001        mov     r4,r1
  593 000004CC E3A0544E        mov     r5,#NFCONF
  594 000004D0         
  595 000004D0 E5951004        ldr     r1,[r5,#4]  ;NFChipEn()
  596 000004D4 E3C11002        bic     r1,r1,#2
  597 000004D8 E5851004        str     r1,[r5,#4]
  598 000004DC         
  599 000004DC E3A01000        mov     r1,#0       ;WrNFCmd(READCMD0)
  600 000004E0 E5C51008        strb    r1,[r5,#8]
  601 000004E4 E5C5100C        strb    r1,[r5,#0xc] ;WrNFAddr(0)
  602 000004E8 E5C5000C        strb    r0,[r5,#0xc] ;WrNFAddr(addr)
  603 000004EC E1A01420        mov     r1,r0,lsr #8 ;WrNFAddr(addr>>8)
  604 000004F0 E5C5100C        strb    r1,[r5,#0xc]
  605 000004F4 E3560000        cmp     r6,#0       ;if(NandAddr)  
  606 000004F8 11A00820        movne   r0,r0,lsr #16 ;WrNFAddr(addr>>16)
  607 000004FC 15C5000C        strneb  r0,[r5,#0xc]
  608 00000500         
  609 00000500 E5950004        ldr     r0,[r5,#4]  ;InitEcc()
  610 00000504 E3800010        orr     r0,r0,#0x10
  611 00000508 E5850004        str     r0,[r5,#4]
  612 0000050C         
  613 0000050C EBFFFFFE        bl      WaitNandBusy ;WaitNFBusy()
  614 00000510         
  615 00000510 E3A00000        mov     r0,#0       ;for(i=0; i<512; i++)
  616 00000514         1
  617 00000514 E5D51010        ldrb    r1,[r5,#0x10] ;buf[i] = RdNFDat()
  618 00000518 E7C41000        strb    r1,[r4,r0]
  619 0000051C E2800001        add     r0,r0,#1
  620 00000520 E3C00B40        bic     r0,r0,#0x10000
  621 00000524 E3500F80        cmp     r0,#0x200
  622 00000528 3AFFFFF9        bcc     %B1
  623 0000052C         
  624 0000052C E5950004        ldr     r0,[r5,#4]  ;NFChipDs()
  625 00000530 E3800002        orr     r0,r0,#2
  626 00000534 E5850004        str     r0,[r5,#4]
  627 00000538         
  628 00000538 E1A0F007        mov     pc,r7
  629 0000053C         
  630 0000053C         ;--------------------LED test
  631 0000053C                 EXPORT  Led_Test
  632 0000053C         Led_Test
  633 0000053C E3A00456        mov     r0, #0x56000000
  634 00000540 E3A01C55        mov     r1, #0x5500



ARM Macro Assembler    Page 24 


  635 00000544 E5801050        str     r1, [r0, #0x50]
  636 00000548         0
  637 00000548 E3A01050        mov     r1, #0x50
  638 0000054C E5801054        str     r1, [r0, #0x54]
  639 00000550 E3A02940        mov     r2, #0x100000
  640 00000554         1
  641 00000554 E2522001        subs    r2, r2, #1
  642 00000558 1AFFFFFD        bne     %B1
  643 0000055C         
  644 0000055C E3A010A0        mov     r1, #0xa0
  645 00000560 E5801054        str     r1, [r0, #0x54]
  646 00000564 E3A02940        mov     r2, #0x100000
  647 00000568         2
  648 00000568 E2522001        subs    r2, r2, #1
  649 0000056C 1AFFFFFD        bne     %B2
  650 00000570 EAFFFFF4        b       %B0
  651 00000574 E1A0F00E        mov     pc, lr
  652 00000578         
  653 00000578         ;=======================================================
                       ====
  654 00000578         
  655 00000578 4A000008 
              4A00001C 
              00007FFF 
              4C000014 
              4C000008 
              00038022 
              4C000004 
              0005C011 
              560000B4 
              56000050 
              56000058 
              56000054 
              000055AA 
              00007770 
              0000EC73 
              0000EC75 
              00000000 
              000002F0 
              00000350 
              00000000 
              000000D8 
              33FF5C00 
              33FF6000 
              33FF7000 
              33FF8000 
              33FF5800         LTORG
  656 000005E0         
  657 000005E0         ;GCS0->SST39VF1601
  658 000005E0         ;GCS1->16c550
  659 000005E0         ;GCS2->IDE
  660 000005E0         ;GCS3->CS8900
  661 000005E0         ;GCS4->DM9000
  662 000005E0         ;GCS5->CF Card
  663 000005E0         ;GCS6->SDRAM
  664 000005E0         ;GCS7->unused
  665 000005E0         
  666 000005E0         SMRDATA DATA
  667 000005E0         ; Memory configuration should be optimized for best perf



ARM Macro Assembler    Page 25 


                       ormance
  668 000005E0         ; The following parameter is not optimized.
  669 000005E0         ; Memory access cycle parameter strategy
  670 000005E0         ; 1) The memory settings is  safe parameters even at HCL
                       K=75Mhz.
  671 000005E0         ; 2) SDRAM refresh period is for HCLK<=75Mhz.
  672 000005E0         
  673 000005E0 2212DD10        DCD     (0+(B1_BWSCON<<4)+(B2_BWSCON<<8)+(B3_BWS
CON<<12)+(B4_BWSCON<<16)+(B5_BWSCON<<20)+(B6_BWSCON<<24)+(B7_BWSCON<<28))
  674 000005E4 00007FF4        DCD     ((B0_Tacs<<13)+(B0_Tcos<<11)+(B0_Tacc<<8
)+(B0_Tcoh<<6)+(B0_Tah<<4)+(B0_Tacp<<2)+(B0_PMC)) 
                                                   ;GCS0
  675 000005E8 00002E50        DCD     ((B1_Tacs<<13)+(B1_Tcos<<11)+(B1_Tacc<<8
)+(B1_Tcoh<<6)+(B1_Tah<<4)+(B1_Tacp<<2)+(B1_PMC)) 
                                                   ;GCS1
  676 000005EC 00001F4C        DCD     ((B2_Tacs<<13)+(B2_Tcos<<11)+(B2_Tacc<<8
)+(B2_Tcoh<<6)+(B2_Tah<<4)+(B2_Tacp<<2)+(B2_PMC)) 
                                                   ;GCS2
  677 000005F0 00007FFC        DCD     ((B3_Tacs<<13)+(B3_Tcos<<11)+(B3_Tacc<<8
)+(B3_Tcoh<<6)+(B3_Tah<<4)+(B3_Tacp<<2)+(B3_PMC)) 
                                                   ;GCS3
  678 000005F4 00002E50        DCD     ((B4_Tacs<<13)+(B4_Tcos<<11)+(B4_Tacc<<8
)+(B4_Tcoh<<6)+(B4_Tah<<4)+(B4_Tacp<<2)+(B4_PMC)) 
                                                   ;GCS4
  679 000005F8 00002E50        DCD     ((B5_Tacs<<13)+(B5_Tcos<<11)+(B5_Tacc<<8
)+(B5_Tcoh<<6)+(B5_Tah<<4)+(B5_Tacp<<2)+(B5_PMC)) 
                                                   ;GCS5
  680 000005FC 00018005        DCD     ((B6_MT<<15)+(B6_Trcd<<2)+(B6_SCAN)) 
                                                   ;GCS6
  681 00000600 00018005        DCD     ((B7_MT<<15)+(B7_Trcd<<2)+(B7_SCAN)) 
                                                   ;GCS7
  682 00000604 009604F4        DCD     ((REFEN<<23)+(TREFMD<<22)+(Trp<<20)+(Tsr
c<<18)+(Tchr<<16)+REFCNT)
  683 00000608         
  684 00000608 00000032        DCD     0x32        ;SCLK power saving mode, BAN
                                                   KSIZE 128M/128M
  685 0000060C         
  686 0000060C 00000030        DCD     0x30        ;MRSR6 CL=3clk
  687 00000610 00000030        DCD     0x30        ;MRSR7 CL=3clk
  688 00000614         
  689 00000614 00000000 
                       BaseOfROM
                               DCD     |Image$$RO$$Base|
  690 00000618 00000000 
                       TopOfROM
                               DCD     |Image$$RO$$Limit|
  691 0000061C 00000000 
                       BaseOfBSS
                               DCD     |Image$$RW$$Base|
  692 00000620 00000000 
                       BaseOfZero
                               DCD     |Image$$ZI$$Base|
  693 00000624 00000000 
                       EndOfBSS
                               DCD     |Image$$ZI$$Limit|
  694 00000628         
  695 00000628                 ALIGN
  696 00000628         
  697 00000628         ;Function for entering power down mode



ARM Macro Assembler    Page 26 


  698 00000628         ; 1. SDRAM should be in self-refresh mode.
  699 00000628         ; 2. All interrupt should be maksked for SDRAM/DRAM self
                       -refresh.
  700 00000628         ; 3. LCD controller should be disabled for SDRAM/DRAM se
                       lf-refresh.
  701 00000628         ; 4. The I-cache may have to be turned on.
  702 00000628         ; 5. The location of the following code may have not to 
                       be changed.
  703 00000628         
  704 00000628         ;void EnterPWDN(int CLKCON);
  705 00000628         EnterPWDN
  706 00000628 E1A02000        mov     r2,r0       ;r2=rCLKCON
  707 0000062C E3100008        tst     r0,#0x8     ;SLEEP mode?
  708 00000630 1AFFFFFE        bne     ENTER_SLEEP
  709 00000634         
  710 00000634         ENTER_STOP
  711 00000634 E59F0154        ldr     r0,=REFRESH
  712 00000638 E5903000        ldr     r3,[r0]     ;r3=rREFRESH
  713 0000063C E1A01003        mov     r1, r3
  714 00000640 E3811840        orr     r1, r1, #BIT_SELFREFRESH
  715 00000644 E5801000        str     r1, [r0]    ;Enable SDRAM self-refresh
  716 00000648         
  717 00000648 E3A01010        mov     r1,#16      ;wait until self-refresh is 
                                                   issued. may not be needed.
  718 0000064C E2511001 
                       0       subs    r1,r1,#1
  719 00000650 1AFFFFFD        bne     %B0
  720 00000654         
  721 00000654 E59F0138        ldr     r0,=CLKCON  ;enter STOP mode.
  722 00000658 E5802000        str     r2,[r0]
  723 0000065C         
  724 0000065C E3A01020        mov     r1,#32
  725 00000660 E2511001 
                       0       subs    r1,r1,#1    ;1) wait until the STOP mode
                                                    is in effect.
  726 00000664 1AFFFFFD        bne     %B0         ;2) Or wait here until the C
                                                   PU&Peripherals will be turne
                                                   d-off
  727 00000668         ;   Entering SLEEP mode, only the reset by wake-up is av
                       ailable.
  728 00000668         
  729 00000668 E59F0120        ldr     r0,=REFRESH ;exit from SDRAM self refres
                                                   h mode.
  730 0000066C E5803000        str     r3,[r0]
  731 00000670         
  732 00000670                 MOV_PC_LR
   47 00000670                 [       THUMBCODE
   50 00000670 E1A0F00E        mov     pc,lr
   51 00000674                 ]
  733 00000674         
  734 00000674         ENTER_SLEEP
  735 00000674         ;NOTE.
  736 00000674         ;1) rGSTATUS3 should have the return address after wake-
                       up from SLEEP mode.
  737 00000674         
  738 00000674 E59F0114        ldr     r0,=REFRESH
  739 00000678 E5901000        ldr     r1,[r0]     ;r1=rREFRESH
  740 0000067C E3811840        orr     r1, r1, #BIT_SELFREFRESH
  741 00000680 E5801000        str     r1, [r0]    ;Enable SDRAM self-refresh



ARM Macro Assembler    Page 27 


  742 00000684         
  743 00000684 E3A01010        mov     r1,#16      ;Wait until self-refresh is 
                                                   issued,which may not be need
                                                   ed.
  744 00000688 E2511001 
                       0       subs    r1,r1,#1
  745 0000068C 1AFFFFFD        bne     %B0
  746 00000690         
  747 00000690 E59F1100        ldr     r1,=MISCCR
  748 00000694 E5910000        ldr     r0,[r1]
  749 00000698 E3800AE0        orr     r0,r0,#(7<<17) ;Set SCLK0=0, SCLK1=0, SC
                                                   KE=0.
  750 0000069C E5810000        str     r0,[r1]
  751 000006A0         
  752 000006A0 E59F00EC        ldr     r0,=CLKCON  ; Enter sleep mode
  753 000006A4 E5802000        str     r2,[r0]
  754 000006A8         
  755 000006A8 EAFFFFFE        b       .           ;CPU will die here.
  756 000006AC         
  757 000006AC         
  758 000006AC         WAKEUP_SLEEP
  759 000006AC         ;Release SCLKn after wake-up from the SLEEP mode.
  760 000006AC E59F10E4        ldr     r1,=MISCCR
  761 000006B0 E5910000        ldr     r0,[r1]
  762 000006B4 E3C00AE0        bic     r0,r0,#(7<<17) ;SCLK0:0->SCLK, SCLK1:0->
                                                   SCLK, SCKE:0->=SCKE.
  763 000006B8 E5810000        str     r0,[r1]
  764 000006BC         
  765 000006BC         ;Set memory control registers
  766 000006BC E59F00D8        ldr     r0,=SMRDATA ;be careful!, hzh
  767 000006C0 E3A01448        ldr     r1,=BWSCON  ;BWSCON Address
  768 000006C4 E2802034        add     r2, r0, #52 ;End address of SMRDATA
  769 000006C8         0
  770 000006C8 E4903004        ldr     r3, [r0], #4
  771 000006CC E4813004        str     r3, [r1], #4
  772 000006D0 E1520000        cmp     r2, r0
  773 000006D4 1AFFFFFB        bne     %B0
  774 000006D8         
  775 000006D8 E3A01F40        mov     r1,#256
  776 000006DC E2511001 
                       0       subs    r1,r1,#1    ;1) wait until the SelfRefre
                                                   sh is released.
  777 000006E0 1AFFFFFD        bne     %B0
  778 000006E4         
  779 000006E4 E59F10B4        ldr     r1,=GSTATUS3 ;GSTATUS3 has the start add
                                                   ress just after SLEEP wake-u
                                                   p
  780 000006E8 E5910000        ldr     r0,[r1]
  781 000006EC         
  782 000006EC E1A0F000        mov     pc,r0
  783 000006F0         
  784 000006F0         ;=======================================================
                       ==============
  785 000006F0         ; Clock division test
  786 000006F0         ; Assemble code, because VSYNC time is very short
  787 000006F0         ;=======================================================
                       ==============
  788 000006F0                 EXPORT  CLKDIV124
  789 000006F0                 EXPORT  CLKDIV144



ARM Macro Assembler    Page 28 


  790 000006F0         
  791 000006F0         CLKDIV124
  792 000006F0         
  793 000006F0 E51F0174        ldr     r0, = CLKDIVN
  794 000006F4 E3A01003        ldr     r1, = 0x3   ; 0x3 = 1:2:4
  795 000006F8 E5801000        str     r1, [r0]
  796 000006FC         ; wait until clock is stable
  797 000006FC E1A00000        nop
  798 00000700 E1A00000        nop
  799 00000704 E1A00000        nop
  800 00000708 E1A00000        nop
  801 0000070C E1A00000        nop
  802 00000710         
  803 00000710 E59F0078        ldr     r0, = REFRESH
  804 00000714 E5901000        ldr     r1, [r0]
  805 00000718 E3C110FF        bic     r1, r1, #0xff
  806 0000071C E3C11E70        bic     r1, r1, #(0x7<<8)
  807 00000720 E3811E47        orr     r1, r1, #0x470 ; REFCNT135
  808 00000724 E5801000        str     r1, [r0]
  809 00000728 E1A00000        nop
  810 0000072C E1A00000        nop
  811 00000730 E1A00000        nop
  812 00000734 E1A00000        nop
  813 00000738 E1A00000        nop
  814 0000073C E1A0F00E        mov     pc, lr
  815 00000740         
  816 00000740         CLKDIV144
  817 00000740 E51F01C4        ldr     r0, = CLKDIVN
  818 00000744 E3A01004        ldr     r1, = 0x4   ; 0x4 = 1:4:4
  819 00000748 E5801000        str     r1, [r0]
  820 0000074C         ; wait until clock is stable
  821 0000074C E1A00000        nop
  822 00000750 E1A00000        nop
  823 00000754 E1A00000        nop
  824 00000758 E1A00000        nop
  825 0000075C E1A00000        nop
  826 00000760         
  827 00000760 E59F0028        ldr     r0, = REFRESH
  828 00000764 E5901000        ldr     r1, [r0]
  829 00000768 E3C110FF        bic     r1, r1, #0xff
  830 0000076C E3C11E70        bic     r1, r1, #(0x7<<8)
  831 00000770 E3811E63        orr     r1, r1, #0x630 ; REFCNT675 - 1520
  832 00000774 E5801000        str     r1, [r0]
  833 00000778 E1A00000        nop
  834 0000077C E1A00000        nop
  835 00000780 E1A00000        nop
  836 00000784 E1A00000        nop
  837 00000788 E1A00000        nop
  838 0000078C E1A0F00E        mov     pc, lr
  839 00000790         
  840 00000790         
  841 00000790                 ALIGN
  842 00000790         
  843 00000790 48000024 
              4C00000C 
              56000080 
              000005E0 
              560000B8         AREA    RamData, DATA, READWRITE
  844 00000000         



ARM Macro Assembler    Page 29 


  845 00000000                 ^       _ISR_STARTADDRESS ; _ISR_STARTADDRESS=0x
                                                   33FF_FF00
  846 00000000 33FFFF00 
                       HandleReset
                               #       4
  847 00000000 33FFFF04 
                       HandleUndef
                               #       4
  848 00000000 33FFFF08 
                       HandleSWI
                               #       4
  849 00000000 33FFFF0C 
                       HandlePabort
                               #       4
  850 00000000 33FFFF10 
                       HandleDabort
                               #       4
  851 00000000 33FFFF14 
                       HandleReserved
                               #       4
  852 00000000 33FFFF18 
                       HandleIRQ
                               #       4
  853 00000000 33FFFF1C 
                       HandleFIQ
                               #       4
  854 00000000         
  855 00000000         ;Do not use the label 'IntVectorTable',
  856 00000000         ;The value of IntVectorTable is different with the addre
                       ss you think it may be.
  857 00000000         ;IntVectorTable
  858 00000000         ;@0x33FF_FF20
  859 00000000 33FFFF20 
                       HandleEINT0
                               #       4
  860 00000000 33FFFF24 
                       HandleEINT1
                               #       4
  861 00000000 33FFFF28 
                       HandleEINT2
                               #       4
  862 00000000 33FFFF2C 
                       HandleEINT3
                               #       4
  863 00000000 33FFFF30 
                       HandleEINT4_7
                               #       4
  864 00000000 33FFFF34 
                       HandleEINT8_23
                               #       4
  865 00000000 33FFFF38 
                       HandleCAM
                               #       4           ; Added for 2440.
  866 00000000 33FFFF3C 
                       HandleBATFLT
                               #       4
  867 00000000 33FFFF40 
                       HandleTICK
                               #       4



ARM Macro Assembler    Page 30 


  868 00000000 33FFFF44 
                       HandleWDT
                               #       4
  869 00000000 33FFFF48 
                       HandleTIMER0
                               #       4
  870 00000000 33FFFF4C 
                       HandleTIMER1
                               #       4
  871 00000000 33FFFF50 
                       HandleTIMER2
                               #       4
  872 00000000 33FFFF54 
                       HandleTIMER3
                               #       4
  873 00000000 33FFFF58 
                       HandleTIMER4
                               #       4
  874 00000000 33FFFF5C 
                       HandleUART2
                               #       4
  875 00000000         ;@0x33FF_FF60
  876 00000000 33FFFF60 
                       HandleLCD
                               #       4
  877 00000000 33FFFF64 
                       HandleDMA0
                               #       4
  878 00000000 33FFFF68 
                       HandleDMA1
                               #       4
  879 00000000 33FFFF6C 
                       HandleDMA2
                               #       4
  880 00000000 33FFFF70 
                       HandleDMA3
                               #       4
  881 00000000 33FFFF74 
                       HandleMMC
                               #       4
  882 00000000 33FFFF78 
                       HandleSPI0
                               #       4
  883 00000000 33FFFF7C 
                       HandleUART1
                               #       4
  884 00000000 33FFFF80 
                       HandleNFCON
                               #       4           ; Added for 2440.
  885 00000000 33FFFF84 
                       HandleUSBD
                               #       4
  886 00000000 33FFFF88 
                       HandleUSBH
                               #       4
  887 00000000 33FFFF8C 
                       HandleIIC
                               #       4
  888 00000000 33FFFF90 



ARM Macro Assembler    Page 31 


                       HandleUART0
                               #       4
  889 00000000 33FFFF94 
                       HandleSPI1
                               #       4
  890 00000000 33FFFF98 
                       HandleRTC
                               #       4
  891 00000000 33FFFF9C 
                       HandleADC
                               #       4
  892 00000000         ;@0x33FF_FFA0
  893 00000000                 END
Command Line: [armasm.dll -keep -list D:\Study\project\FL2440\ucosii\ucosii_Dat
a\DebugRel\ObjectCode\2440init.s.lst -g -browseinfo "0xff
"   -cpu ARM920T -fpu None]
