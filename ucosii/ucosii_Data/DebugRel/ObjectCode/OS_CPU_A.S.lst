


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ***************
    2 00000000         ; BASED ON
    3 00000000         ;***************************************************
    4 00000000         ; $Workfile:   Os_cpu_a.s  $
    5 00000000         ; $Revision: 1.1.1.1 $
    6 00000000         ; $Author: liuzheng $
    7 00000000         ; $Date: 2004/07/31  $
    8 00000000         ; **************************************************
    9 00000000         
   10 00000000         ;*******************************************************
                       *************/
   11 00000000                 AREA    |subr|, CODE, READONLY
   12 00000000                 IMPORT  OSTCBCur
   13 00000000                 IMPORT  OSTCBHighRdy
   14 00000000                 IMPORT  OSPrioCur
   15 00000000                 IMPORT  OSPrioHighRdy
   16 00000000                 IMPORT  OSRunning
   17 00000000                 IMPORT  OSIntNesting
   18 00000000                 IMPORT  OSTimeTick
   19 00000000                 IMPORT  OSIntEnter
   20 00000000                 IMPORT  OSIntExit
   21 00000000                 IMPORT  OSTaskSwHook
   22 00000000                 IMPORT  OSIntCtxSwFlag
   23 00000000         
   24 00000000                 IMPORT  SAVED_LR_IRQ
   25 00000000                 IMPORT  SAVED_LR_SVC
   26 00000000         
   27 00000000                 IMPORT  TmrSignalTmr
   28 00000000         
   29 00000000                 EXPORT  OSTickISR
   30 00000000                 EXPORT  ARMDisableInt
   31 00000000                 EXPORT  ARMEnableInt
   32 00000000                 EXPORT  OSIntCtxSw
   33 00000000                 EXPORT  OSCtxSw
   34 00000000                 EXPORT  OSStartHighRdy
   35 00000000         
   36 00000000         ;/******************************************************
                       *****************
   37 00000000         ;
   38 00000000         ; Function: OSStartHighRdy
   39 00000000         ;
   40 00000000         ; Purpose:
   41 00000000         ;     To start the task with the highest priority during
                        OS startup
   42 00000000         ;
   43 00000000         ; Processing:
   44 00000000         ;    See uC/OS-II Task Level Context Switch flow chart
   45 00000000         ;
   46 00000000         ; Parameters: void
   47 00000000         ;
   48 00000000         ; Outputs:  None
   49 00000000         ;
   50 00000000         ; Returns:  void
   51 00000000         ;
   52 00000000         ; Notes:
   53 00000000         ;   Called once during OSStart()
   54 00000000         ;
   55 00000000         ;*******************************************************



ARM Macro Assembler    Page 2 


                       **************/
   56 00000000         OSStartHighRdy
   57 00000000 EBFFFFFE        BL      OSTaskSwHook ; Call user-defined hook fu
                                                   nction
   58 00000004         
   59 00000004 E59F4154        LDR     r4, =OSRunning ; Indicate that multitask
                                                   ing has started
   60 00000008 E3A05001        MOV     r5, #1
   61 0000000C E5C45000        STRB    r5, [r4]    ; OSRunning = true
   62 00000010         
   63 00000010 E59F414C        LDR     r4, =OSTCBHighRdy ; Get highest priority
                                                    task TCB address
   64 00000014 E5944000        LDR     r4, [r4]    ; get stack pointer
   65 00000018 E594D000        LDR     sp, [r4]    ; switch to the new stack
   66 0000001C         
   67 0000001C E8BD0010        LDMFD   sp!, {r4}   ; pop new task s spsr
   68 00000020 E161F004        MSR     spsr_c, r4
   69 00000024 E8BD0010        LDMFD   sp!, {r4}   ; pop new task s psr
   70 00000028 E121F004        MSR     cpsr_c, r4
   71 0000002C E8BDDFFF        LDMFD   sp!, {r0-r12,lr,pc} ; pop new task s r0-
                                                   r12,lr & pc
   72 00000030         
   73 00000030         
   74 00000030         ;/******************************************************
                       *****************
   75 00000030         ;
   76 00000030         ; Function: OS_TASK_SW 
   77 00000030         ;
   78 00000030         ; Purpose:
   79 00000030         ;  To perform a context switch from the Task Level.
   80 00000030         ;
   81 00000030         ; Processing:
   82 00000030         ;    See uC/OS-II Task Level Context Switch flow chart
   83 00000030         ;
   84 00000030         ; Parameters: void
   85 00000030         ;
   86 00000030         ; Outputs:  None
   87 00000030         ;
   88 00000030         ; Returns:  void
   89 00000030         ;
   90 00000030         ; Notes:
   91 00000030         ;   On entry, OSTCBCur and OSPrioCur hold the current TC
                       B and priority
   92 00000030         ;   and OSTCBHighRdy and OSPrioHighRdy contain the same 
                       for the task
   93 00000030         ;   to be switched to.
   94 00000030         ; 
   95 00000030         ;   The following code assumes that the virtual memory i
                       s directly
   96 00000030         ;   mapped into  physical memory. If this is not true, t
                       he cache must 
   97 00000030         ;   be flushed at context switch to avoid address aliasi
                       ng.
   98 00000030         ;
   99 00000030         ;*******************************************************
                       **************/
  100 00000030         OSCtxSw
  101 00000030 E92D4000        STMFD   sp!, {lr}   ; push pc (lr is actually be
                                                    pushed in place of PC)



ARM Macro Assembler    Page 3 


  102 00000034 E92D5FFF        STMFD   sp!, {r0-r12,lr} 
                                                   ; push lr & register file
  103 00000038 E10F4000        MRS     r4, cpsr    ; copy CPSR to R4 
  104 0000003C E92D0010        STMFD   sp!, {r4}   ; push current psr
  105 00000040 E14F4000        MRS     r4, spsr    ; copy SPSR to R4
  106 00000044 E92D0010        STMFD   sp!, {r4}   ; push current spsr
  107 00000048         
  108 00000048         _OSCtxSw
  109 00000048 E59F4118        LDR     r4, =OSPrioCur 
                                                   ; OSPrioCur = OSPrioHighRdy
  110 0000004C E59F5118        LDR     r5, =OSPrioHighRdy
  111 00000050 E5D56000        LDRB    r6, [r5]
  112 00000054 E5C46000        STRB    r6, [r4]
  113 00000058         
  114 00000058 E59F4110        LDR     r4, =OSTCBCur ; Get current task TCB add
                                                   ress
  115 0000005C E5945000        LDR     r5, [r4]
  116 00000060 E585D000        STR     sp, [r5]    ; store sp in preempted task
                                                   s's TCB
  117 00000064         
  118 00000064 EBFFFFFE        BL      OSTaskSwHook ; call Task Switch Hook
  119 00000068         
  120 00000068 E59F60F4        LDR     r6, =OSTCBHighRdy ; Get highest priority
                                                    task TCB address
  121 0000006C E5966000        LDR     r6, [r6]
  122 00000070 E596D000        LDR     sp, [r6]    ; get new task s stack point
                                                   er
  123 00000074         
  124 00000074 E5846000        STR     r6, [r4]    ; set new current task TCB a
                                                   ddress
  125 00000078         
  126 00000078 E8BD0010        LDMFD   sp!, {r4}   ; pop new task spsr
  127 0000007C E161F004        MSR     spsr_c, r4
  128 00000080 E8BD0010        LDMFD   sp!, {r4}   ; pop new task cpsr
  129 00000084 E121F004        MSR     cpsr_c, r4
  130 00000088 E8BDDFFF        LDMFD   sp!, {r0-r12,lr,pc} ; pop new task r0-r1
                                                   2,lr & pc
  131 0000008C         
  132 0000008C         
  133 0000008C         ;*******************************************************
                       ****************
  134 0000008C         ;
  135 0000008C         ; Function: OSIntCtxSw
  136 0000008C         ;
  137 0000008C         ; Purpose:
  138 0000008C         ;  To perform a context switch from the interrupt level.
                       
  139 0000008C         ;
  140 0000008C         ; Processing:
  141 0000008C         ;    See uC/OS-II Interrupt Level Context Switch flow ch
                       art
  142 0000008C         ;
  143 0000008C         ; Parameters: void
  144 0000008C         ;
  145 0000008C         ; Outputs:  None
  146 0000008C         ;
  147 0000008C         ; Returns:  void
  148 0000008C         ;
  149 0000008C         ; Notes:



ARM Macro Assembler    Page 4 


  150 0000008C         ;   Sets up the stacks and registers to call the task le
                       vel
  151 0000008C         ;   context switch
  152 0000008C         ;
  153 0000008C         ;*******************************************************
                       **************/
  154 0000008C         OSIntCtxSw
  155 0000008C E59F00E0        LDR     r0, =OSIntCtxSwFlag 
                                                   ; OSIntCtxSwFlag = true
  156 00000090 E3A01001        MOV     r1, #1
  157 00000094 E5801000        STR     r1, [r0]
  158 00000098 E1A0F00E        MOV     pc, lr      ;This is only change flag,re
                                                   turn to OSIntExit
  159 0000009C         
  160 0000009C         ;/******************************************************
                       *****************
  161 0000009C         ;
  162 0000009C         ; Function: OSTickISR
  163 0000009C         ;
  164 0000009C         ; Purpose:
  165 0000009C         ;     The IRQ interrupt handler
  166 0000009C         ;
  167 0000009C         ; Processing:
  168 0000009C         ;    Saves context
  169 0000009C         ;    Calls the IRQ dispatcher
  170 0000009C         ;    Checks if context switch necessary
  171 0000009C         ;    If not, restores context and returns from interrupt
                       
  172 0000009C         ;    If switch required, branches without link to IRQCon
                       textSwap
  173 0000009C         ;       which performs context switch if interrupts not 
                       nested
  174 0000009C         ;       and returns from interrupt to new context
  175 0000009C         ;
  176 0000009C         ; Parameters: void
  177 0000009C         ;
  178 0000009C         ; Outputs:  None
  179 0000009C         ;
  180 0000009C         ; Returns:  void
  181 0000009C         ;
  182 0000009C         ; Notes:
  183 0000009C         ;   (1) here we use OSIntCtxSwFlag to indicate a request
                        for int-level 
  184 0000009C         ;       context switch 
  185 0000009C         ;   (2) _IntCtxSw is used to perform a real switch opera
                       tion
  186 0000009C         ;
  187 0000009C         ;*******************************************************
                       **************/ 
  188 0000009C         OSTickISR
  189 0000009C E24EE004        SUB     lr, lr, #4
  190 000000A0 E92D5FFF        STMFD   sp!, {r0-r12, lr} ; push r0-r12 register
                                                    file and lr( pc return addr
                                                   ess )
  191 000000A4         
  192 000000A4 E14F4000        MRS     r4, spsr
  193 000000A8 E92D0010        STMFD   sp!, {r4}   ; push current spsr_irq ( =c
                                                   psr_svc )
  194 000000AC         



ARM Macro Assembler    Page 5 


  195 000000AC         ;rI_ISPC = BIT_TIMER4
  196 000000AC         
  197 000000AC E3A00C40        mov     r0,#0x4000
  198 000000B0 E3A0144A        mov     r1,#0x4a000000
  199 000000B4 E5810000        str     r0,[r1,#0]
  200 000000B8 E3A00C40        mov     r0,#0x4000
  201 000000BC E3A0144A        mov     r1,#0x4a000000
  202 000000C0 E5810010        str     r0,[r1,#0x10]
  203 000000C4         
  204 000000C4         ;-------------------------------------------------------
                       ------------------
  205 000000C4         
  206 000000C4 EBFFFFFE        BL      OSIntEnter
  207 000000C8         ;liuzheng 2003-2-14
  208 000000C8 EBFFFFFE        BL      OSTimeTick
  209 000000CC         
  210 000000CC EBFFFFFE        BL      TmrSignalTmr
  211 000000D0         ;if task change, OSIntCtxSwFlag set 1
  212 000000D0 EBFFFFFE        BL      OSIntExit
  213 000000D4         
  214 000000D4 E59F0098        LDR     r0, =OSIntCtxSwFlag ; check if OSIntCtxF
                                                   lag is marked as true
  215 000000D8 E5901000        LDR     r1, [r0]
  216 000000DC E3510001        CMP     r1, #1
  217 000000E0         
  218 000000E0 0AFFFFFE        BEQ     _IntCtxSw   ; if OSIntCtxFlag = true, th
                                                   en jump to _IntCtxSw
  219 000000E4         
  220 000000E4 E8BD0010        LDMFD   sp!, {r4}   ; get cpsr_svc from stack
  221 000000E8 E161F004        MSR     spsr_c, r4  ; prepare spsr to return svc
                                                    mode 
  222 000000EC E8FD9FFF        LDMFD   sp!, {r0-r12, pc}^ ; recover r0-r12 and 
                                                   pc from stack, cpsr also
  223 000000F0         
  224 000000F0         _IntCtxSw
  225 000000F0 E3A01000        MOV     r1, #0      ; clear OSIntCtxSwFlag = fla
                                                   se
  226 000000F4 E5801000        STR     r1, [r0]
  227 000000F8         
  228 000000F8 E8BD0010        LDMFD   sp!, {r4}   ; restore spsr_irq 
  229 000000FC E161F004        MSR     spsr_c, r4
  230 00000100 E8BD5FFF        LDMFD   sp!, {r0-r12, lr} ; recover the irq stac
                                                   k pointer
  231 00000104         
  232 00000104 E59F506C        LDR     r5, =SAVED_LR_IRQ
  233 00000108 E59F606C        LDR     r6, =SAVED_LR_SVC
  234 0000010C E585E000        STR     lr, [r5]    ; save lr_irq to SAVED_LR_IR
                                                   Q  
  235 00000110 E3A0E093        MOV     lr, #0x00000093 ; change forcely cpsr to
                                                    svc mode
  236 00000114 E121F00E        MSR     cpsr_c, lr
  237 00000118 E586E000        STR     lr, [r6]    ; save lr_svc to SAVED_LR_SV
                                                   C
  238 0000011C E595E000        LDR     lr, [r5]    ; get lr_irq value saved in 
                                                   SAVED_LR_IRQ 
  239 00000120 E92D4000        STMFD   sp!, {lr}   ; push future task pc (lr_ir
                                                   q should be pushed in place 
                                                   of PC)
  240 00000124 E596E000        LDR     lr, [r6]    ; get lr_svc value saved in 



ARM Macro Assembler    Page 6 


                                                   SAVED_LR_SVC 
  241 00000128 E92D5FFF        STMFD   sp!, {r0-r12,lr} ; push lr & r0-r12 regi
                                                   ster file
  242 0000012C E14F4000        MRS     r4, spsr
  243 00000130 E92D0010        STMFD   sp!, {r4}   ; push current psr
  244 00000134 E14F4000        MRS     r4, spsr
  245 00000138 E92D0010        STMFD   sp!, {r4}   ; push spsr
  246 0000013C         
  247 0000013C EAFFFFFE        B       _OSCtxSw    ; jump to _OSCtxSw 
  248 00000140         
  249 00000140         ;/******************************************************
                       *****************
  250 00000140         ;
  251 00000140         ; Functions: ARMDisableInt
  252 00000140         ;       ARMEnableInt
  253 00000140         ;
  254 00000140         ; Purpose:
  255 00000140         ;    Disable and enable IRQ and FIQ preserving current C
                       PU mode.
  256 00000140         ;
  257 00000140         ; Processing:
  258 00000140         ;    Push the cpsr onto the stack
  259 00000140         ;    Disable IRQ and FIQ interrupts
  260 00000140         ;    Return 
  261 00000140         ;
  262 00000140         ; Parameters: void
  263 00000140         ;
  264 00000140         ; Outputs:  None
  265 00000140         ;
  266 00000140         ; Returns:  void
  267 00000140         ;
  268 00000140         ; Notes:
  269 00000140         ;   (1) Can be called from SVC mode to protect Critical 
                       Sections. 
  270 00000140         ;   (2) Do not use these calls at interrupt level.
  271 00000140         ;   (3) Used in pairs within the same function level;
  272 00000140         ;   (4) Will restore interrupt state when called; i.e., 
                       if interrupts
  273 00000140         ;       are disabled when DisableInt is called, interrup
                       ts will still
  274 00000140         ;       still be disabled when the matching EnableInt is
                        called.
  275 00000140         ;   (5) Uses the method described by Labrosse as "Method
                        2".
  276 00000140         ;
  277 00000140         ;*******************************************************
                       **************/
  278 00000140         ARMDisableInt
  279 00000140 E10F0000        MRS     r0, cpsr
  280 00000144 E92D0001        STMFD   sp!, {r0}   ; push current PSR
  281 00000148 E3800080        ORR     r0, r0, #0x80
  282 0000014C E121F000        MSR     cpsr_c, r0  ; disable IRQ Int s
  283 00000150         
  284 00000150 E1A0F00E        MOV     pc, lr
  285 00000154         
  286 00000154         
  287 00000154         ;-------------------------------------------------------
                       -----------------
  288 00000154         ARMEnableInt



ARM Macro Assembler    Page 7 


  289 00000154 E8BD0001        LDMFD   sp!, {r0}   ; pop current PSR
  290 00000158 E121F000        MSR     cpsr_c, r0  ; restore original cpsr 
  291 0000015C         
  292 0000015C E1A0F00E        MOV     pc, lr
  293 00000160         ;-------------------------------------------------------
                       -----------------
  294 00000160         
                       
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: [armasm.dll -keep -list D:\Study\project\FL2440\ucosii\ucosii_Dat
a\DebugRel\ObjectCode\OS_CPU_A.S.lst -g -browseinfo "0xff
"   -cpu ARM920T -fpu None]
